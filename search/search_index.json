{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Nightscout \u2301 Introduction \u2301 Nightscout (CGM in the Cloud) is an open source, DIY project cloud application, which you can install yourself using free hosting from various cloud service providers. Once installed, Nightscout acts as a central repository of blood glucose and insulin dosing data for a single person, allowing you to view the CGM graph and other data anywhere using a web browser. The CGM data is sent to Nightscout using an uploader application such as xDrip+ or Spike, running on a mobile phone carried by the person being monitored. The application you'll need for uploading the data depends on which CGM device you're using. In addition to viewing the data using a web browser, there are several applications available for mobile devices and smart watches, which allow you alternate ways to view the information. Once you have Nightscout up and running, you'll get a view that looks something like this: Important Please understand that this project: Is highly experimental Is not approved for therapy You take full responsibility for building and running this system and do so at your own risk. Looking to install Nightscout? \u2301 Start with the Overview . Looking to update to latest reelease? \u2301 Go to the Update instructions . Development History \u2301 Nightscout has been developed as an open-source, shared project. How to Use These Docs \u2301 Use the navigation menu at the top of the screen to find the info you are looking for. A Table of Contents for the current page is always displayed on the left side of the screen. You can search the Nightscout Docs site by clicking the icon.","title":"Home"},{"location":"#welcome-to-nightscout","text":"","title":"Welcome to Nightscout"},{"location":"#introduction","text":"Nightscout (CGM in the Cloud) is an open source, DIY project cloud application, which you can install yourself using free hosting from various cloud service providers. Once installed, Nightscout acts as a central repository of blood glucose and insulin dosing data for a single person, allowing you to view the CGM graph and other data anywhere using a web browser. The CGM data is sent to Nightscout using an uploader application such as xDrip+ or Spike, running on a mobile phone carried by the person being monitored. The application you'll need for uploading the data depends on which CGM device you're using. In addition to viewing the data using a web browser, there are several applications available for mobile devices and smart watches, which allow you alternate ways to view the information. Once you have Nightscout up and running, you'll get a view that looks something like this: Important Please understand that this project: Is highly experimental Is not approved for therapy You take full responsibility for building and running this system and do so at your own risk.","title":"Introduction"},{"location":"#looking-to-install-nightscout","text":"Start with the Overview .","title":"Looking to install Nightscout?"},{"location":"#looking-to-update-to-latest-reelease","text":"Go to the Update instructions .","title":"Looking to update to latest reelease?"},{"location":"#development-history","text":"Nightscout has been developed as an open-source, shared project.","title":"Development History"},{"location":"#how-to-use-these-docs","text":"Use the navigation menu at the top of the screen to find the info you are looking for. A Table of Contents for the current page is always displayed on the left side of the screen. You can search the Nightscout Docs site by clicking the icon.","title":"How to Use These Docs"},{"location":"nightscout/ifttt/","text":"IFTTT Integration \u2301 If This, Then That (IFTTT) is a useful Nightscout integration. By using IFTTT, you can have single button presses on your iPhone that will set an override, log a cannula change, log a sensor change and much more. Step 1: Get your API Secret Hash \u2301 First we need to gather one thing called your \"hashed API Secret\". In your internet browser, open a \"console\" window while viewing your Nightscout site. Make sure you have \"authenticated\" your site by using your API secret in the Nightscout settings area (hint: if you see a little padlock in the upper left corner of the site, you haven't authenticated it). Refresh the site and your hashed secret key will be shown as \"apisecrethash: \"xxxxxxxxxx...\"\" For Safari users on Mac , you can open the console window by selecting \"Develop\" from the Safari top menu, and then \"Show Page Source\" (if you do not see \"Develop\" in the top menu, activate it by going to Safari > Preferences... > Advanced, and checking the \"Show Develop menu in menu bar\" option). If you're having problems seeing the apisecrethash, click the little grey triangle next to the \"status isAuthenticated\" line and the objects below it will display (see screenshot). Your hashed API secret can be copied and pasted from that line, as shown below. Save that somewhere easy to get to again, because you will be using it later. For Chrome users , the console window is found through the View >> Developer >> View Source. Click on the Console tab and scroll to find the \"status isAuthenticated\" row to find your apisecrethash. Copy your API hash to somewhere you can retreive it again, we will be copy/pasting it in Step 2. Step 2: Create your \"Applets\" \u2301 IFTTT calls their little actions that you'll create an \"applet\". I have no idea why. But, I will go along and use their terminology so we are all consistent. We are basically interested in creating applets that will be buttons on your phone to do cool things in Nightscout. So, you'll have a button that will log when you changed your sensor last...letting you see in Nightscout easily just how old a sensor is at any given time. Or you can create a button that will turn on an \"exercise\" override that you already programmed into your kid's Loop app. So, let's make our first applet (aka button). Get an IFTTT account Login to your IFTTT.com account and select click this link to get to the page for creating your first \"New Applet\". (You can also get to this Applet creation page by selecting your Account icon in the upper right of the IFTTT website, then clicking on \"Create\".) In the screen that appears, click on the black \"+this\" part of the screen In the next screen, type \"button\" in the search field and then click on the red box labelled \"ButtonWidget\" Connect the button widget by clicking on the large black\"connect\" button twice, once on the main screen and then second on the pop-up window that will appear immediately after that. (You will only have to \"connect\" the widgets for the first applet you make. After that the widgets will already connected to your IFTTT account.) Click on the large red \"button press\" box Click on the black \"+that\" text Enter \"Webhooks\" in the search field and click on the Webhooks app Connect the Webhooks app Select the blue \"Make a Web Request\" box Now you will have a blank web request template to complete. Screenshot below is an example of a completed recipe for eating soon IFTTT action. There are four parts you will need to fill in, and they are described below the screenshot. URL https://yoursite.herokuapp.com/api/v1/treatments.json (for all IFTTT recipes that are NOT remote overrides...so things like cannula changes, sensor changes, pump battery changes, etc.) Change the \"yoursite\" to your actual site's info. Method The method will be POST Content Type The content type will be application/json . Body The content of the body will depend on the action that you would like this particular button press to perform. While many recipes are available, any recipe that log carbs to NS will only display the carbs in Nightscout...Loop will not \"use\" those carbs in treatment or prediction math. The display of carbs in NS though may still be helpful for remote care givers to leave an indication that a low is being noticed and treated. Some sample content for actions that may be useful in Loop: Pump Site Change {\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Site Change\", \"duration\": 0, \"secret\": \"your_hashed_api_goes_here!!!\"} CGM Sensor Start {\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Sensor Start\", \"duration\": 0, \"secret\": \"your_hashed_api_goes_here!!!\"} Note {\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Note\", \"notes\": \"Hi mom, please don't text me for a bit. I'm taking a test.\", \"secret\": \"your_hashed_api_goes_here!!!\"} Special note for IFTTT to set a Remote Override with dev branch Triggering a remote override with IFTTT takes a couple considerations; 1. You have followed the directions for setting up remote overrides in Nightscout already. 2. Remote overrides will use https://yoursite.herokuapp.com/api/v2/notifications/loop for the URL line of the applet. Notice that is different from the other type of applets' URL. 3. The Body message of the applet needs to match the override already programmed in Loop app; the reason, reasonDisplay, and duration all need to match what is preset in your Loop app. The \"duration\" is giving in minutes in the body message (vs hours in Loop), and if the override is one that is \"enabled indefinitely\" then the duration is \"infinite\". The \"reason\" is the name of the override but NO EMOJI, and the \"reasonDisplay\" is the override name with the emoji. Check out the samples Body messages for overrides below. You will have to edit your body messages to match your reason and reasonDisplay. The target range and duration of the override does not need to be specified. Body message for override named \"hormones\" {\"eventType\": \"Temporary Override\", \"reason\": \"hormones\", \"reasonDisplay\": \"\ud83e\udddf\u200d\u2640\ufe0f hormones\", \"secret\": \"your_hashed_api_goes_here!!!\"} Body message for override named \"running\" {\"eventType\": \"Temporary Override\", \"reason\": \"running\", \"reasonDisplay\": \"\ud83c\udfc3\u200d\u2640\ufe0f running\", \"secret\": \"your_hashed_api_goes_here!!!\"} Body message for override named \"Low Treatment\" {\"eventType\": \"Temporary Override\", \"reason\": \"Low Treatment\", \"reasonDisplay\": \"\ud83c\udf6c Low Treatment\", \"secret\": \"your_hashed_api_goes_here!!!\"} Body message to cancel any override {\"eventType\": \"Temporary Override Cancel\", \"secret\": \"your_hashed_api_goes_here!!!\"} Click the Create Action button on the bottom of the screen when you finish. Now is your chance to change the title of your applet now to something meaningful. You can turn on notifications, too, using the slider shown. If you turn on the notifications, you will get an alert on your phone and pebble watch when the button press has been successfully deployed. Finish the IFTTT button by clicking on the Finish button that appears. Repeat the setup for new applets for as many automated actions/overrides as you would like to setup. Step 3: Enable IFTTT in your Nightscout site \u2301 Now that we have cool applets made, we need to give Nightscout some information so that it will accept commands from our applets. It's pretty simple to do...just a couple additions to your Heroku settings. Find your Maker Key by going to your IFTTT account icon in upper right corner, choose \"My services\" and then click on the Webhooks service, settings. You will see your Maker Key as the last part of the URL after the use/ ; copy and paste that last part (the red circled part as shown) Login to your Nightscout site host (azure or heroku) and (1) add your Maker Key to the MAKER_KEY line and (2) add \"maker\" to your ENABLE line. Step 4: Install IFTTT app on your iPhone/Android \u2301 Now that all the hard work is done, we can take easy street and just add that work to the phone via the IFTTT app. By accessing the IFTTT widget on your iPhone, you'll be able to easily and quickly access the useful buttons you've just created. Download the IFTTT app on your phone and log in using your IFTTT account. For iPhone users, if you swipe right from your iPhone's home screen, you will have the Today view showing. Scroll to the bottom, click \"edit\". This should show a list of existing widgets, followed by a list of \"more widgets\" with green + signs. Click on the IFTTT's green circle and the widget will be moved to the top, active widgets area. You can hold your finger on the three left lines of the IFTTT widget row to drag it to the top of your widget panel, if you prefer to have it as the top-most widget. If you end up with more than four IFTTT applets, they will appear in reverse-order of when they were created...which may not be the same as you'd prefer them to appear on your widget bar. If you'd like to reorder them: go into your iPhone's IFTTT app click on My Applets click on the gear icon in upper left of screen click on Widgets click on the pencil icon in upper right of screen click and hold the three lines that appear on the right side of the widget that you want to move. Drag the widget to the order in the list that you'd like it to appear in your widget quickscreen. Extra Credit: Alexa integration \u2301 Since you have IFTTT/Maker requests working, you can get it to work with anything that supports IFTTT, including Alexa. You will need to add \"alexa\" to your ENABLE line in your Heroku settings. And then repeat the steps above, but instead of using \"ButtonWidget\" service we started with earlier (the \"+if\" part of the setup)...you will use the \"AmazonAlexa\" service. Alexa requests do not need underscores, FYI.","title":"IFTTT"},{"location":"nightscout/ifttt/#ifttt-integration","text":"If This, Then That (IFTTT) is a useful Nightscout integration. By using IFTTT, you can have single button presses on your iPhone that will set an override, log a cannula change, log a sensor change and much more.","title":"IFTTT Integration"},{"location":"nightscout/ifttt/#step-1-get-your-api-secret-hash","text":"First we need to gather one thing called your \"hashed API Secret\". In your internet browser, open a \"console\" window while viewing your Nightscout site. Make sure you have \"authenticated\" your site by using your API secret in the Nightscout settings area (hint: if you see a little padlock in the upper left corner of the site, you haven't authenticated it). Refresh the site and your hashed secret key will be shown as \"apisecrethash: \"xxxxxxxxxx...\"\" For Safari users on Mac , you can open the console window by selecting \"Develop\" from the Safari top menu, and then \"Show Page Source\" (if you do not see \"Develop\" in the top menu, activate it by going to Safari > Preferences... > Advanced, and checking the \"Show Develop menu in menu bar\" option). If you're having problems seeing the apisecrethash, click the little grey triangle next to the \"status isAuthenticated\" line and the objects below it will display (see screenshot). Your hashed API secret can be copied and pasted from that line, as shown below. Save that somewhere easy to get to again, because you will be using it later. For Chrome users , the console window is found through the View >> Developer >> View Source. Click on the Console tab and scroll to find the \"status isAuthenticated\" row to find your apisecrethash. Copy your API hash to somewhere you can retreive it again, we will be copy/pasting it in Step 2.","title":"Step 1: Get your API Secret Hash"},{"location":"nightscout/ifttt/#step-2-create-your-applets","text":"IFTTT calls their little actions that you'll create an \"applet\". I have no idea why. But, I will go along and use their terminology so we are all consistent. We are basically interested in creating applets that will be buttons on your phone to do cool things in Nightscout. So, you'll have a button that will log when you changed your sensor last...letting you see in Nightscout easily just how old a sensor is at any given time. Or you can create a button that will turn on an \"exercise\" override that you already programmed into your kid's Loop app. So, let's make our first applet (aka button). Get an IFTTT account Login to your IFTTT.com account and select click this link to get to the page for creating your first \"New Applet\". (You can also get to this Applet creation page by selecting your Account icon in the upper right of the IFTTT website, then clicking on \"Create\".) In the screen that appears, click on the black \"+this\" part of the screen In the next screen, type \"button\" in the search field and then click on the red box labelled \"ButtonWidget\" Connect the button widget by clicking on the large black\"connect\" button twice, once on the main screen and then second on the pop-up window that will appear immediately after that. (You will only have to \"connect\" the widgets for the first applet you make. After that the widgets will already connected to your IFTTT account.) Click on the large red \"button press\" box Click on the black \"+that\" text Enter \"Webhooks\" in the search field and click on the Webhooks app Connect the Webhooks app Select the blue \"Make a Web Request\" box Now you will have a blank web request template to complete. Screenshot below is an example of a completed recipe for eating soon IFTTT action. There are four parts you will need to fill in, and they are described below the screenshot. URL https://yoursite.herokuapp.com/api/v1/treatments.json (for all IFTTT recipes that are NOT remote overrides...so things like cannula changes, sensor changes, pump battery changes, etc.) Change the \"yoursite\" to your actual site's info. Method The method will be POST Content Type The content type will be application/json . Body The content of the body will depend on the action that you would like this particular button press to perform. While many recipes are available, any recipe that log carbs to NS will only display the carbs in Nightscout...Loop will not \"use\" those carbs in treatment or prediction math. The display of carbs in NS though may still be helpful for remote care givers to leave an indication that a low is being noticed and treated. Some sample content for actions that may be useful in Loop: Pump Site Change {\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Site Change\", \"duration\": 0, \"secret\": \"your_hashed_api_goes_here!!!\"} CGM Sensor Start {\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Sensor Start\", \"duration\": 0, \"secret\": \"your_hashed_api_goes_here!!!\"} Note {\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Note\", \"notes\": \"Hi mom, please don't text me for a bit. I'm taking a test.\", \"secret\": \"your_hashed_api_goes_here!!!\"} Special note for IFTTT to set a Remote Override with dev branch Triggering a remote override with IFTTT takes a couple considerations; 1. You have followed the directions for setting up remote overrides in Nightscout already. 2. Remote overrides will use https://yoursite.herokuapp.com/api/v2/notifications/loop for the URL line of the applet. Notice that is different from the other type of applets' URL. 3. The Body message of the applet needs to match the override already programmed in Loop app; the reason, reasonDisplay, and duration all need to match what is preset in your Loop app. The \"duration\" is giving in minutes in the body message (vs hours in Loop), and if the override is one that is \"enabled indefinitely\" then the duration is \"infinite\". The \"reason\" is the name of the override but NO EMOJI, and the \"reasonDisplay\" is the override name with the emoji. Check out the samples Body messages for overrides below. You will have to edit your body messages to match your reason and reasonDisplay. The target range and duration of the override does not need to be specified. Body message for override named \"hormones\" {\"eventType\": \"Temporary Override\", \"reason\": \"hormones\", \"reasonDisplay\": \"\ud83e\udddf\u200d\u2640\ufe0f hormones\", \"secret\": \"your_hashed_api_goes_here!!!\"} Body message for override named \"running\" {\"eventType\": \"Temporary Override\", \"reason\": \"running\", \"reasonDisplay\": \"\ud83c\udfc3\u200d\u2640\ufe0f running\", \"secret\": \"your_hashed_api_goes_here!!!\"} Body message for override named \"Low Treatment\" {\"eventType\": \"Temporary Override\", \"reason\": \"Low Treatment\", \"reasonDisplay\": \"\ud83c\udf6c Low Treatment\", \"secret\": \"your_hashed_api_goes_here!!!\"} Body message to cancel any override {\"eventType\": \"Temporary Override Cancel\", \"secret\": \"your_hashed_api_goes_here!!!\"} Click the Create Action button on the bottom of the screen when you finish. Now is your chance to change the title of your applet now to something meaningful. You can turn on notifications, too, using the slider shown. If you turn on the notifications, you will get an alert on your phone and pebble watch when the button press has been successfully deployed. Finish the IFTTT button by clicking on the Finish button that appears. Repeat the setup for new applets for as many automated actions/overrides as you would like to setup.","title":"Step 2: Create your \"Applets\""},{"location":"nightscout/ifttt/#step-3-enable-ifttt-in-your-nightscout-site","text":"Now that we have cool applets made, we need to give Nightscout some information so that it will accept commands from our applets. It's pretty simple to do...just a couple additions to your Heroku settings. Find your Maker Key by going to your IFTTT account icon in upper right corner, choose \"My services\" and then click on the Webhooks service, settings. You will see your Maker Key as the last part of the URL after the use/ ; copy and paste that last part (the red circled part as shown) Login to your Nightscout site host (azure or heroku) and (1) add your Maker Key to the MAKER_KEY line and (2) add \"maker\" to your ENABLE line.","title":"Step 3: Enable IFTTT in your Nightscout site"},{"location":"nightscout/ifttt/#step-4-install-ifttt-app-on-your-iphoneandroid","text":"Now that all the hard work is done, we can take easy street and just add that work to the phone via the IFTTT app. By accessing the IFTTT widget on your iPhone, you'll be able to easily and quickly access the useful buttons you've just created. Download the IFTTT app on your phone and log in using your IFTTT account. For iPhone users, if you swipe right from your iPhone's home screen, you will have the Today view showing. Scroll to the bottom, click \"edit\". This should show a list of existing widgets, followed by a list of \"more widgets\" with green + signs. Click on the IFTTT's green circle and the widget will be moved to the top, active widgets area. You can hold your finger on the three left lines of the IFTTT widget row to drag it to the top of your widget panel, if you prefer to have it as the top-most widget. If you end up with more than four IFTTT applets, they will appear in reverse-order of when they were created...which may not be the same as you'd prefer them to appear on your widget bar. If you'd like to reorder them: go into your iPhone's IFTTT app click on My Applets click on the gear icon in upper left of screen click on Widgets click on the pencil icon in upper right of screen click and hold the three lines that appear on the right side of the widget that you want to move. Drag the widget to the order in the list that you'd like it to appear in your widget quickscreen.","title":"Step 4: Install IFTTT app on your iPhone/Android"},{"location":"nightscout/ifttt/#extra-credit-alexa-integration","text":"Since you have IFTTT/Maker requests working, you can get it to work with anything that supports IFTTT, including Alexa. You will need to add \"alexa\" to your ENABLE line in your Heroku settings. And then repeat the steps above, but instead of using \"ButtonWidget\" service we started with earlier (the \"+if\" part of the setup)...you will use the \"AmazonAlexa\" service. Alexa requests do not need underscores, FYI.","title":"Extra Credit: Alexa integration"},{"location":"nightscout/mlab_cleanup/","text":"Nightscout Issues \u2301 The free Nightscout we use also depends on a free database from mLab. The free database only has so much room...500 MB to be specific. After a period of time (it will vary, but usually on the order of months), your mLab database could reach its free limits. When that happens, your NS site may stop showing data properly. For example, you may notice your Share Bridge will not pull data and your site will be \u201cstale\u201d. The good news? Loop can still run just fine until you repair your mLab database. The bad news? You just won\u2019t be able to remotely monitor Loop through NS until you clear up some storage space in mLab. These steps WILL BE NEEDED BY EVERYONE AT SOME POINT IN TIME ...so please don't ignore these troubleshooting steps. If you see anything suddenly strange about your NS site after it had been working fine, start with these steps below. mLab Cleanup \u2301 There are two steps to getting your Nightscout site running again. You will need to do both steps. The first step clears out some space in your database. The second step consolidates the remaining data into a more compact space, and therefore makes the data take up less room overall in your database. You need to do both steps to help keep your NS humming along. If you'd like a video demonstration of the steps needed to do this...here ya go. The video uses just a slightly different way to do Step 1...either way is totally fine. Click the image or click this Nightscout Cleanup link ...you'll end up at the same place. Step 1: Delete Data \u2301 Go to your Nightscout site's settings (the three horizontal bars in the upper right of your Nightscout site) and open your Admin Tools for the site. Click on the buttons to \"Delete all documents\" in your Clean Mongo status database section of the Admin Tools. For good measure, also click on the buttons for removing future items as well. Step 2: Repair Database \u2301 Now that you cleared out some database space, we can now make the database more efficient by \"repairing\" the database. To begin the repair process, click on the mlab link in your Heroku site control panel. Then click on the Tools tab in the screen that opens. Click on the commands button and then select the repairDatabase from the dropdown menu of available commands. At the bottom of the screen, select the Run Command button. After a short time, you should get a return message of \"ok\" at the bottom of the command menu box. If you failed to clear out your Mongo status database before running this command, you will likely not get a successful repair and instead your pointer wheel will just keep spinning. Make sure you first clean out the database section as described above with your Nightscout Admin Tools. You can verify that your database housekeeping was successful by returning to your NS site and waiting for the next Loop upload. You should see all your information back in with the next Loop run.","title":"NS Stopped Working"},{"location":"nightscout/mlab_cleanup/#nightscout-issues","text":"The free Nightscout we use also depends on a free database from mLab. The free database only has so much room...500 MB to be specific. After a period of time (it will vary, but usually on the order of months), your mLab database could reach its free limits. When that happens, your NS site may stop showing data properly. For example, you may notice your Share Bridge will not pull data and your site will be \u201cstale\u201d. The good news? Loop can still run just fine until you repair your mLab database. The bad news? You just won\u2019t be able to remotely monitor Loop through NS until you clear up some storage space in mLab. These steps WILL BE NEEDED BY EVERYONE AT SOME POINT IN TIME ...so please don't ignore these troubleshooting steps. If you see anything suddenly strange about your NS site after it had been working fine, start with these steps below.","title":"Nightscout Issues"},{"location":"nightscout/mlab_cleanup/#mlab-cleanup","text":"There are two steps to getting your Nightscout site running again. You will need to do both steps. The first step clears out some space in your database. The second step consolidates the remaining data into a more compact space, and therefore makes the data take up less room overall in your database. You need to do both steps to help keep your NS humming along. If you'd like a video demonstration of the steps needed to do this...here ya go. The video uses just a slightly different way to do Step 1...either way is totally fine. Click the image or click this Nightscout Cleanup link ...you'll end up at the same place.","title":"mLab Cleanup"},{"location":"nightscout/mlab_cleanup/#step-1-delete-data","text":"Go to your Nightscout site's settings (the three horizontal bars in the upper right of your Nightscout site) and open your Admin Tools for the site. Click on the buttons to \"Delete all documents\" in your Clean Mongo status database section of the Admin Tools. For good measure, also click on the buttons for removing future items as well.","title":"Step 1: Delete Data"},{"location":"nightscout/mlab_cleanup/#step-2-repair-database","text":"Now that you cleared out some database space, we can now make the database more efficient by \"repairing\" the database. To begin the repair process, click on the mlab link in your Heroku site control panel. Then click on the Tools tab in the screen that opens. Click on the commands button and then select the repairDatabase from the dropdown menu of available commands. At the bottom of the screen, select the Run Command button. After a short time, you should get a return message of \"ok\" at the bottom of the command menu box. If you failed to clear out your Mongo status database before running this command, you will likely not get a successful repair and instead your pointer wheel will just keep spinning. Make sure you first clean out the database section as described above with your Nightscout Admin Tools. You can verify that your database housekeeping was successful by returning to your NS site and waiting for the next Loop upload. You should see all your information back in with the next Loop run.","title":"Step 2: Repair Database"},{"location":"nightscout/new_user/","text":"New Nightscout Users \u2301 Nightscout is DIY, if you don\u2019t feel confident you\u2019ll have necessary skills, give it a try, you\u2019ll find open heart people ready to help you building it in many Facebook groups. For free. Paying it forward. Here is a step-by-step guide for completing your own Nightscout site DIY style. Create your Heroku, GitHub and Atlas accounts from a computer. Do not change device/computer/browser during the creation process! If you have issues with your current browser try another one. Step 1: Create a GitHub account \u2301 Click this link to create a GitHub account: https://github.com/ Enter a username (anything you want and that is accepted, not very important), email, and password. Then click Sign up for GitHub Play and solve the puzzle then click Join a free plan . Select whatever choices (not important) then click Complete setup . GitHub will send you a verification email, open your mailbox and check for it (look into spam also). On the received email, click Verify email address . A new page will open in your browser, click Skip this for now . Leave the page open as it is. Step 2: Create a Heroku account \u2301 Click this link to create an Heroku account: https://signup.heroku.com/login Enter mandatory data (*) and click CREATE FREE ACCOUNT Heroku will send a confirmation email, open your mailbox and look for it (also check spam folder). Click on the activation link Create a password an write it down. Click SET PASSWORD AND LOG IN Click CLICK HERE TO PROCEED Your Heroku page will open, click on your profile picture top right and select Account Settings Click on Billing Click Add credit card Enter a valid credit card information and click Save Details Note Unless you voluntarily select billable features, your credit card information is only used for verifications and you will not be charged anything. Worst case you\u2019ll be charged $0.00 You should now have 2 pages open: Heroku and GitHub. Leave them open. Step 3: Create an Atlas account \u2301 Open another tab at: https://www.mongodb.com/cloud/atlas and click Start Free Enter information then click Get Started Free Select Create a cluster in Shared Clusters (FREE) Leave all default values and click Create Cluster Atlas will create your default cluster, wait until completion\u2026 (can take more than 3 minutes) Click on CONNECT Click on Allow Access from Anywhere Click on Add IP Address Add a username (for example nightscout) and a password. Write down this information, you\u2019ll need it later. Then click Create Database User . Click on Choose a connection method Select Connect your application Copy the connection string: click Copy and paste it somewhere to edit it (like Notepad). Modify the connection string: It should be similar to this ( xxxxx will be different): mongodb+srv://nightscout:<password>@cluster0.xxxxx.mongodb.net/<dbname>?retryWrites=true&w=majority Replace with your password as noted previously and by any text you want, say mycgmic for example. The result will be like this: mongodb+srv://nightscout:soo5ecret@cluster0.xxxxx.mongodb.net/mycgmic?retryWrites=true&w=majority Note: there are no < and > characters in the final string, neither for password and database name. Keep this string safely aside, it is called your MONGODB_URI Step 4: Fork and deploy cgm-remote-monitor \u2301 You should now have three pages opened in your browser: Heroku, Atlas and Github, make sur each one is logged in (i.e. not asking you to login) before you continue. Click this link https://github.com/nightscout/cgm-remote-monitor , a new GitHub page will open. Click on Fork Wait a moment Scroll down and click Deploy to Heroku Enter your CGM in the Cloud site name: invent a name you will use to see your BG in the cloud. Check the name is available. Don\u2019t change the region. Scroll down and setup the following variables: API_SECRET will be your Nightscout site password, it needs to be at least 12 characters long and should NOT use spaces and @ or ! symbols . If you want to link your Dexcom Share account as a data source, compile the following lines: MOST COMMON ERRORS The BRIDGE_PASSWORD and BRIDGE_USER_NAME are NOT visible from within your Dexcom app or online account. The values for them are what you entered into your Dexcom mobile app when you VERY FIRST logged into that app however long ago. The BRIDGE_USER_NAME is not an email address. The most common error on initial Nightscout setups is that people incorrectly use an old account or an old password. To test your username and password, go to Dexcom's Clarity page and try logging into your Dexcom account. If your account info doesn't let you in, or you don't see data in your Clarity account...then you need to figure out your actual credentials before moving ahead. If you want to link your CareLink account as a data source, compile the following lines: Select the units you\u2019re using in DISPLAY_UNIT In ENABLE copy and paste the following words (PS: better too many than not enough): pump iob cob basal careportal sage cage bage boluscalc dbsize mmconnect bridge Now you need that connection string you defined during the Atlas cluster creation (as the example below, but not the string below). Copy and paste it in the MONGODB_URI variable field. mongodb+srv://nightscout:soo5ecret@cluster0.xxxxx.mongodb.net/mycgmic?retryWrites=true&w=majority Browse down to the end of the list and click Deploy app WAIT until completion (will take some time). Do not interfere with the process until it's complete. Then click View Your Nightscout site should open, click on the hamburger menu top right and select Profile Editor . Setup your Time zone and eventually all other fields. Do not leave empty fields. If you don't know which value you should use, just leave default. You can change them later. Browse down to Authentication status and click Authenticate . Enter your API secret. Click Update . Click Save . If the following pop-up shows up click OK , and check status (upper right of the window). Dexcom Share and CareLink users should see data flowing in after some minutes, other uploaders like xDrip+, Spike, xDrip4iOS, etc will need to be setup with the Nightscout address and API secret in the app. Step 7: Additional Variables \u2301 You will find more information on the variables here: https://github.com/nightscout/cgm-remote-monitor#environment Finally, you might want to modify the PAPERTRAIL_API_TOKEN line. Heroku offers a free, tiny amount of Papertrail service (like a logging service for how the site is running), but really generates more confusion to most people later when they get a message that their \"Free Papertrail Service has run out of room\". Papertrail is not needed, edit the line and add DISABLED at the end, so that you can recover the function should you need it. Step 6: Uploader setup \u2301 Most uploaders require your Nightscout URL and the API secret. For xDrip+ you need to put the URL in this format: https://APISecret@SiteURL.herokuapp.com/api/v1","title":"Brand New NS"},{"location":"nightscout/new_user/#new-nightscout-users","text":"Nightscout is DIY, if you don\u2019t feel confident you\u2019ll have necessary skills, give it a try, you\u2019ll find open heart people ready to help you building it in many Facebook groups. For free. Paying it forward. Here is a step-by-step guide for completing your own Nightscout site DIY style. Create your Heroku, GitHub and Atlas accounts from a computer. Do not change device/computer/browser during the creation process! If you have issues with your current browser try another one.","title":"New Nightscout Users"},{"location":"nightscout/new_user/#step-1-create-a-github-account","text":"Click this link to create a GitHub account: https://github.com/ Enter a username (anything you want and that is accepted, not very important), email, and password. Then click Sign up for GitHub Play and solve the puzzle then click Join a free plan . Select whatever choices (not important) then click Complete setup . GitHub will send you a verification email, open your mailbox and check for it (look into spam also). On the received email, click Verify email address . A new page will open in your browser, click Skip this for now . Leave the page open as it is.","title":"Step 1: Create a GitHub account"},{"location":"nightscout/new_user/#step-2-create-a-heroku-account","text":"Click this link to create an Heroku account: https://signup.heroku.com/login Enter mandatory data (*) and click CREATE FREE ACCOUNT Heroku will send a confirmation email, open your mailbox and look for it (also check spam folder). Click on the activation link Create a password an write it down. Click SET PASSWORD AND LOG IN Click CLICK HERE TO PROCEED Your Heroku page will open, click on your profile picture top right and select Account Settings Click on Billing Click Add credit card Enter a valid credit card information and click Save Details Note Unless you voluntarily select billable features, your credit card information is only used for verifications and you will not be charged anything. Worst case you\u2019ll be charged $0.00 You should now have 2 pages open: Heroku and GitHub. Leave them open.","title":"Step 2: Create a Heroku account"},{"location":"nightscout/new_user/#step-3-create-an-atlas-account","text":"Open another tab at: https://www.mongodb.com/cloud/atlas and click Start Free Enter information then click Get Started Free Select Create a cluster in Shared Clusters (FREE) Leave all default values and click Create Cluster Atlas will create your default cluster, wait until completion\u2026 (can take more than 3 minutes) Click on CONNECT Click on Allow Access from Anywhere Click on Add IP Address Add a username (for example nightscout) and a password. Write down this information, you\u2019ll need it later. Then click Create Database User . Click on Choose a connection method Select Connect your application Copy the connection string: click Copy and paste it somewhere to edit it (like Notepad). Modify the connection string: It should be similar to this ( xxxxx will be different): mongodb+srv://nightscout:<password>@cluster0.xxxxx.mongodb.net/<dbname>?retryWrites=true&w=majority Replace with your password as noted previously and by any text you want, say mycgmic for example. The result will be like this: mongodb+srv://nightscout:soo5ecret@cluster0.xxxxx.mongodb.net/mycgmic?retryWrites=true&w=majority Note: there are no < and > characters in the final string, neither for password and database name. Keep this string safely aside, it is called your MONGODB_URI","title":"Step 3: Create an Atlas account"},{"location":"nightscout/new_user/#step-4-fork-and-deploy-cgm-remote-monitor","text":"You should now have three pages opened in your browser: Heroku, Atlas and Github, make sur each one is logged in (i.e. not asking you to login) before you continue. Click this link https://github.com/nightscout/cgm-remote-monitor , a new GitHub page will open. Click on Fork Wait a moment Scroll down and click Deploy to Heroku Enter your CGM in the Cloud site name: invent a name you will use to see your BG in the cloud. Check the name is available. Don\u2019t change the region. Scroll down and setup the following variables: API_SECRET will be your Nightscout site password, it needs to be at least 12 characters long and should NOT use spaces and @ or ! symbols . If you want to link your Dexcom Share account as a data source, compile the following lines: MOST COMMON ERRORS The BRIDGE_PASSWORD and BRIDGE_USER_NAME are NOT visible from within your Dexcom app or online account. The values for them are what you entered into your Dexcom mobile app when you VERY FIRST logged into that app however long ago. The BRIDGE_USER_NAME is not an email address. The most common error on initial Nightscout setups is that people incorrectly use an old account or an old password. To test your username and password, go to Dexcom's Clarity page and try logging into your Dexcom account. If your account info doesn't let you in, or you don't see data in your Clarity account...then you need to figure out your actual credentials before moving ahead. If you want to link your CareLink account as a data source, compile the following lines: Select the units you\u2019re using in DISPLAY_UNIT In ENABLE copy and paste the following words (PS: better too many than not enough): pump iob cob basal careportal sage cage bage boluscalc dbsize mmconnect bridge Now you need that connection string you defined during the Atlas cluster creation (as the example below, but not the string below). Copy and paste it in the MONGODB_URI variable field. mongodb+srv://nightscout:soo5ecret@cluster0.xxxxx.mongodb.net/mycgmic?retryWrites=true&w=majority Browse down to the end of the list and click Deploy app WAIT until completion (will take some time). Do not interfere with the process until it's complete. Then click View Your Nightscout site should open, click on the hamburger menu top right and select Profile Editor . Setup your Time zone and eventually all other fields. Do not leave empty fields. If you don't know which value you should use, just leave default. You can change them later. Browse down to Authentication status and click Authenticate . Enter your API secret. Click Update . Click Save . If the following pop-up shows up click OK , and check status (upper right of the window). Dexcom Share and CareLink users should see data flowing in after some minutes, other uploaders like xDrip+, Spike, xDrip4iOS, etc will need to be setup with the Nightscout address and API secret in the app.","title":"Step 4: Fork and deploy cgm-remote-monitor"},{"location":"nightscout/new_user/#step-7-additional-variables","text":"You will find more information on the variables here: https://github.com/nightscout/cgm-remote-monitor#environment Finally, you might want to modify the PAPERTRAIL_API_TOKEN line. Heroku offers a free, tiny amount of Papertrail service (like a logging service for how the site is running), but really generates more confusion to most people later when they get a message that their \"Free Papertrail Service has run out of room\". Papertrail is not needed, edit the line and add DISABLED at the end, so that you can recover the function should you need it.","title":"Step 7: Additional Variables"},{"location":"nightscout/new_user/#step-6-uploader-setup","text":"Most uploaders require your Nightscout URL and the API secret. For xDrip+ you need to put the URL in this format: https://APISecret@SiteURL.herokuapp.com/api/v1","title":"Step 6: Uploader setup"},{"location":"nightscout/overview/","text":"Overview \u2301 Nightscout (NS) is an excellent tool for remotely viewing Loop's actions. It allows for easy remote monitoring of Loop activities, troubleshooting of Loop errors, history of CGM, carbs, boluses, & temp basals, reports analyzing data trends and patterns. There is a Nightscout app in your iPhone App Store, or you can use a web browser to view the data. Setting up Nightscout is free and fairly quick. Once set up, the site can be accessed by anyone that you share your unique Nightscout URL with. Nightscout is highly recommended for Loop users, especially those using Loop as caregivers to t1ds. Nightscout displays are often the easiest way to troubleshoot Loop settings, if you are having problems and seeking input from others. Below is some discussion about the general Nightscout display, as well as some Loop-specific display information. Blood Glucose \u2301 Your blood glucose (BG) readings from your CGM are shown in green, yellow, or red in the main graph area of NS. You can adjust your high and low BG targets in NS (when NS alerts will start for high/low BGs), but those will not affect your Loop performance. Loop only uses the BG targets given in the Loop app settings. The main screen of BGs is displaying the time duration you have selected (in the example above, 12 hours of BG history). The bottom of the screen shows the last 48-hours of BG trends. You can scan backward by dragging the bottom timeline to the left, if you want to review specific Loop actions or data in the last two days. SAGE, CAGE, BAGE pills \u2301 The SAGE, CAGE, and BAGE pills are for Sensor Age, Cannula Age, and (pump) Battery Age. These optional pills track the time since your CGM sensor, Pump site, and Pump battery were last changed. You can set up custom alerts to remind you when it is time to change the devices, or simply use the visuals to keep track of your particular timing for site/sensor changes. These fields will not auto-update from pump or CGM devices, instead you will have to update them using Nightscout Careportal so that the pill information is accurate. Carbs \u2301 Carbs are automatically uploaded to NS by the Loop app. The amount of carbs on board (active carbs or COB) can be seen by clicking the Loop pill. The size of a white carb dot on the graph is proportional to the amount of carbs entered...bigger meals get bigger dots. Loop does not read carbs from NS for use in looping calculations, it only uploads carbs to NS that have been entered in the Loop app. Boluses \u2301 Insulin boluses are also automatically uploaded to NS by the Loop app. The bolus is shown as a filled-in blue lower-half of the dot, and the specific amount of the bolus is also shown. There may be a slight delay between when the carbs for a meal are uploaded to NS to when the meal bolus appears. This is because depending on the pump model and size of bolus, the bolus may take a few minutes to actually be administered then Loop has to perform a pump read to verify the reservoir volume has decreased (i.e., the bolus was given). As shown in the example above, the meal carbs have been uploaded, but the bolus delivery is still in progress. Insulin on board (active insulin or IOB) is also shown in the Loop pill. Temp Basals \u2301 Within your NS profile, you will enter in the scheduled basal for your Loop user. This is not automatically updated when you update the Loop app or your pump; you will have to manually update your basal profile in your NS site if you change your basal profile in Loop and/or pump. (Note: The dev branch does now update NS with the basal schedule from Loop, but dev is considered generally less stable than the master branch). If you don't update the NS basal profile, it doesn't cause any problems in Loop function...you simply won't have accurate VISUAL representation of high/low temp basals within NS. The dashed blue line represents the scheduled basal profile (as entered in your NS profile). The solid blue lines indicate the actual basal amounts set for a given time...so as Loop sets temp basals higher or lower than your scheduled basal rate, the solid blue line will jump above or below your dashed blue line. There is a slight delay (up to 2-5 minutes) in the rendering of basal changes on the blue lines, so if you want the accurate current basal rate, you can check the Loop pill. Predicted BG \u2301 The purple line to the right of the BG is Loop's predicted BG. Watching the behavior of that purple line can help you understand why Loop is making decisions regarding high or low temps. You can read more on that topic in the Algorithm section of these docs. Loop pill \u2301 The Loop pill is the little display box which when hovered over, or clicked, will provide additional information about recent Loop activities and status. Information included is the last time Loop ran, the temp basal set, IOB, and COB. Looking at the Loop pill is a quick method for assessing if you loop is currently active, as well. Loop Pill status indicator symbols X Error in Loop \u03d5 Recommending basal, but not enacting (open loop or pump suspended) \u2301 Enacted a new temp basal \u21bb Loop is continuing with last temp basal, no change \u26a0 Warning indicating Loop is either red or has failed to upload to Nightscout for a longer period of time. Mouseover or Touch the Loop pill to view a tool tip containing one or more of the latest status messages. The most up-to-date NS also includes information in the Loop pill for the minimum and maximum predicted BG, eventual and predicted BG.","title":"Overview"},{"location":"nightscout/overview/#overview","text":"Nightscout (NS) is an excellent tool for remotely viewing Loop's actions. It allows for easy remote monitoring of Loop activities, troubleshooting of Loop errors, history of CGM, carbs, boluses, & temp basals, reports analyzing data trends and patterns. There is a Nightscout app in your iPhone App Store, or you can use a web browser to view the data. Setting up Nightscout is free and fairly quick. Once set up, the site can be accessed by anyone that you share your unique Nightscout URL with. Nightscout is highly recommended for Loop users, especially those using Loop as caregivers to t1ds. Nightscout displays are often the easiest way to troubleshoot Loop settings, if you are having problems and seeking input from others. Below is some discussion about the general Nightscout display, as well as some Loop-specific display information.","title":"Overview"},{"location":"nightscout/overview/#blood-glucose","text":"Your blood glucose (BG) readings from your CGM are shown in green, yellow, or red in the main graph area of NS. You can adjust your high and low BG targets in NS (when NS alerts will start for high/low BGs), but those will not affect your Loop performance. Loop only uses the BG targets given in the Loop app settings. The main screen of BGs is displaying the time duration you have selected (in the example above, 12 hours of BG history). The bottom of the screen shows the last 48-hours of BG trends. You can scan backward by dragging the bottom timeline to the left, if you want to review specific Loop actions or data in the last two days.","title":"Blood Glucose"},{"location":"nightscout/overview/#sage-cage-bage-pills","text":"The SAGE, CAGE, and BAGE pills are for Sensor Age, Cannula Age, and (pump) Battery Age. These optional pills track the time since your CGM sensor, Pump site, and Pump battery were last changed. You can set up custom alerts to remind you when it is time to change the devices, or simply use the visuals to keep track of your particular timing for site/sensor changes. These fields will not auto-update from pump or CGM devices, instead you will have to update them using Nightscout Careportal so that the pill information is accurate.","title":"SAGE, CAGE, BAGE pills"},{"location":"nightscout/overview/#carbs","text":"Carbs are automatically uploaded to NS by the Loop app. The amount of carbs on board (active carbs or COB) can be seen by clicking the Loop pill. The size of a white carb dot on the graph is proportional to the amount of carbs entered...bigger meals get bigger dots. Loop does not read carbs from NS for use in looping calculations, it only uploads carbs to NS that have been entered in the Loop app.","title":"Carbs"},{"location":"nightscout/overview/#boluses","text":"Insulin boluses are also automatically uploaded to NS by the Loop app. The bolus is shown as a filled-in blue lower-half of the dot, and the specific amount of the bolus is also shown. There may be a slight delay between when the carbs for a meal are uploaded to NS to when the meal bolus appears. This is because depending on the pump model and size of bolus, the bolus may take a few minutes to actually be administered then Loop has to perform a pump read to verify the reservoir volume has decreased (i.e., the bolus was given). As shown in the example above, the meal carbs have been uploaded, but the bolus delivery is still in progress. Insulin on board (active insulin or IOB) is also shown in the Loop pill.","title":"Boluses"},{"location":"nightscout/overview/#temp-basals","text":"Within your NS profile, you will enter in the scheduled basal for your Loop user. This is not automatically updated when you update the Loop app or your pump; you will have to manually update your basal profile in your NS site if you change your basal profile in Loop and/or pump. (Note: The dev branch does now update NS with the basal schedule from Loop, but dev is considered generally less stable than the master branch). If you don't update the NS basal profile, it doesn't cause any problems in Loop function...you simply won't have accurate VISUAL representation of high/low temp basals within NS. The dashed blue line represents the scheduled basal profile (as entered in your NS profile). The solid blue lines indicate the actual basal amounts set for a given time...so as Loop sets temp basals higher or lower than your scheduled basal rate, the solid blue line will jump above or below your dashed blue line. There is a slight delay (up to 2-5 minutes) in the rendering of basal changes on the blue lines, so if you want the accurate current basal rate, you can check the Loop pill.","title":"Temp Basals"},{"location":"nightscout/overview/#predicted-bg","text":"The purple line to the right of the BG is Loop's predicted BG. Watching the behavior of that purple line can help you understand why Loop is making decisions regarding high or low temps. You can read more on that topic in the Algorithm section of these docs.","title":"Predicted BG"},{"location":"nightscout/overview/#loop-pill","text":"The Loop pill is the little display box which when hovered over, or clicked, will provide additional information about recent Loop activities and status. Information included is the last time Loop ran, the temp basal set, IOB, and COB. Looking at the Loop pill is a quick method for assessing if you loop is currently active, as well. Loop Pill status indicator symbols X Error in Loop \u03d5 Recommending basal, but not enacting (open loop or pump suspended) \u2301 Enacted a new temp basal \u21bb Loop is continuing with last temp basal, no change \u26a0 Warning indicating Loop is either red or has failed to upload to Nightscout for a longer period of time. Mouseover or Touch the Loop pill to view a tool tip containing one or more of the latest status messages. The most up-to-date NS also includes information in the Loop pill for the minimum and maximum predicted BG, eventual and predicted BG.","title":"Loop pill"},{"location":"nightscout/pebble/","text":"Pebble Watchface \u2301 The Pebble Watchface called SkyLoop Predict can be used with either Loop or OpenAPS systems. You will need to have a Nightscout website setup and integrated in order for the watchface to work. Simply use your Pebble app to search for the watchface and install it. In the watchface settings, enter your Nightscout URL in the Data Endpoint field, select Loop for the system, and enter iob in the T1 Name field. By entering iob , the watchface will display the iob on the watchface. In addition to the information displayed on the main watchface screen, shaking your wrist will bring up information about the pump battery and reservoir levels.","title":"Pebble"},{"location":"nightscout/pebble/#pebble-watchface","text":"The Pebble Watchface called SkyLoop Predict can be used with either Loop or OpenAPS systems. You will need to have a Nightscout website setup and integrated in order for the watchface to work. Simply use your Pebble app to search for the watchface and install it. In the watchface settings, enter your Nightscout URL in the Data Endpoint field, select Loop for the system, and enter iob in the T1 Name field. By entering iob , the watchface will display the iob on the watchface. In addition to the information displayed on the main watchface screen, shaking your wrist will bring up information about the pump battery and reservoir levels.","title":"Pebble Watchface"},{"location":"nightscout/pushover/","text":"Remote notifications \u2301 While Loop app currently sends notifications locally on Loop user's iPhone, parents and caregivers likely want those messages on their phones, too. We can achieve this functionality through a combination of Nightscout, IFTTT, Google, and Pushover. Traditionally, most people may already know of Pushover alerts through their NS site. The old Loop docs had set up for how to add your PUSHOVER_ANNOUNCEMENT_KEY , PUSHOVER_API_TOKEN , and PUSHOVER_USER_KEY in your Heroku settings to get notifications on the non-looping phones of parents and caregivers. The drawback for that method is that you could not necessarily fine-tune the alerts (maybe you wanted battery alarms on your NS website, but not get pushovers for them...a bit hard to separate out the environments that way) and Pushover had a demanding acknowledgment requirement. If you failed to acknowledge an alert, you may end up getting alarm fatigue fairly quickly as the alarm repeated itself. Using Pushover THROUGH IFTTT however, we can improve the possible notifications and who receives which ones. For example, a teenage Looper may want notifications when his/her pump site needs changing and when his/her Dexcom is about to expire in the next day. S/he already gets local notifications on his/her phone via Loop for low reservoir volumes, low pump battery, and Loop failures. Dexcom app provides high/low BG notifications locally, too. If s/he were to get those same alarms via Pushover, s/he would inevitably get alarm fatigue. A remotely-monitoring parent may want additional information, like a pushover alert when the school nurse boluses for lunch, as well as Loop failures, low iPhone battery level for the child, low pump battery, and other such information that might be useful. Perhaps there's also an emergency contact person that you only want to get high/low BG alerts...you can set that up as well quite easily. The basic concept is that NS puts out an event that triggers the IFTTT service called Webhooks (old name was \"Maker Webhooks\" hence you may see references to \"maker\" in NS docs). Actually, there are several types of events that NS has programmed in all ready to use in IFTTT. For this setup, we are going to use the most general logging event called ns-event . You'll get all the alarms and notifications logged, and then you can decide in subsequent steps which ones you'd actually like to send to your phone for pushover notification. As a brief roadmap for what we are going to do: Get necessary accounts setup Add a folder to your Google Drive Make an IFTTT applet to log NS events to your Google Spreadsheets Enable NS to work with that new IFTTT applet Make an IFTTT applet to send Pushover alert when the Google Spreadsheet is updated Get Prepped \u2301 If you don't already have these steps done, you will need them. Skip any that you already have done. Setup a Nightscout site Get an IFTTT account Get a Pushover Account Get a Google Account Download the Pushover app onto your phone, and any other phone you'd like to receive Pushover alerts Download the IFTTT app onto your phone, and any other phone you'd like to use IFTTT applets on Login to the Pushover and IFTTT apps with your login information Add a Google Drive folder \u2301 Login to your Google account and select Google Drive Click on the blue \"New\" button and create a new folder named IFTTT. Double click on the newly created IFTTT folder, select the blue \"New\" button again, and create a new subfolder called \"Nightscout-Alarms\" This IFTTT/Nightscout-Alarms folder will eventually contain numerous Google Spreadsheets, one for each NS alarm or information that is logged. As new alarms are triggered, the IFTTT applet we are about to write will add a row to the appropriate spreadsheet logging the time of the alarm and any other reported details that go with the entry. For now though, your drive will be blank...screenshot below just to give you an idea of where we are going. Make 1st IFTTT Applet to Log NS Alarms \u2301 Login to your IFTTT.com account and select the \"New Applet\" button. In the screen that appears, click on the blue \"+this\" part of the screen In the next screen, type \"webhooks\" in the search field and then click on the blue connect button If this is the first time you are using IFTTT Webhooks service, you will have a \"Connect\" button to select. If you already have IFTTT applets using Webhooks, you won't see this screen...just move to the next bullet. Click on the \"receive a web request\" blue box, and then fill in the Event Name as ns-event and then press the \"Create trigger\" button. (Side note: the event name used here corresponds to the triggers discussed above for core events that NS already has integrated for IFTTT users. If you want to, instead, use the other triggers such as ns-warn or ns-urgent, you can. This example is using the most general trigger so that the options are wider for most users.) Click on the blue \"+that\" text Enter google in the search field and click on the Google Sheets icon Select the green \"Add row to spreadsheet\" box Delete the contents of the \"Spreadsheet Name\" and \"Drive folder path\". For the \"Spreadsheet Name\", click the \"Add Ingredient\" button and select the \"Value1\". For the \"Drive folder path\", enter IFTTT/Nightscout-Alarms . You do not have to modify the \"Formatted row\" box's contents. Click the \"Create action\" button at the bottom. Turn off the toggle for receiving notifications when the applet runs, and then click the Finish button You'll now have the finished IFTTT applet that will cause a row to be added to a Google spreadsheet...tracking all your NS notifications and alarms. If it is the first time that alarm has been logged, the applet will also create the spreadsheet itself. After a while, your IFTTT/Nightscout-Alarms folder will start to look like the screenshot posted above with numerous spreadsheets for each alarm type. Enable IFTTT Webhooks in your Nightscout site \u2301 If you already have created IFTTT buttons previously to work with your NS site, you can skip this section. If those buttons are working, then you've already added your MAKER_KEY and \"maker\" to your ENABLE line in Heroku. To actually make that first applet work, we need to enter a \"Maker Key\" to get NS and IFTTT talking to each other. Find your Maker Key by going to your IFTTT account, Services and then clicking on Webhooks. (Your screen may not have as many services showing; the example account below just happens to already use several services.) You will see your Maker Key as the last part of the URL; copy that last part (the red circled part) Navigate to your Heroku account's settings tab, \"reveal config vars\" and (1) add your Maker Key to the MAKER_KEY line and (2) add \"maker\" to your ENABLE line. Make 2nd IFTTT Applet to send Pushover notifications \u2301 In your IFTTT account, select the \"New Applet\" button. In the screen that appears, click on the blue \"+this\" part of the screen In the next screen, type \"google\" in the search field and then click on the \"Google Sheets\" logo. Click on the \"New row added to spreadsheet\" as the trigger. Enter the following information: Folder path is IFTTT/Nightscout-Alarms and for the filename you are going to enter the name of the particular NS alarm or information that you would like to get pushover alerts for. Click on the \"Create trigger\" button to save the trigger. This applet can't be created unless your filename (alarm spreadsheet) already exists. If your 1st applet we created above hasn't run for a long time, the spreadsheets may not exist yet because the alarms haven't triggered. You have two options...(1) manually create the file in your Google Drive so that you can finish the applet now or (2) wait several days/weeks for the alarms to happen and that will automatically create the files in your Google drive. If you choose option 1, here's a partial list of some of the filenames you could create in advance: Loop isn't looping Cannula age 48 hours Cannula age 72 hours Meal Bolus Warning, Pump Reservoir Low Warning Uploader Battery is Low Temporary Override Depending on your alert levels you specified in NS, some of the hours in the titles may vary to match your settings Click on the blue \"+that\" text Enter pushover in the search field and click on the Pushover icon. If this is your first time linking your IFTTT to Pushover, you will be prompted to enter your Pushover account login and allow IFTTT access. This only needs to be done once. Select the \"Send a Pushover notification\" box Delete the contents of the \"Title\" and \"Message\" and \"URL\" boxes. For the Title, click the \"Add Ingredient\" button and add ColumnC . For the \"Message\", click the \"Add Ingredient\" button and add the values of various columns from your spreadsheet for the information you would like to include. For the alerts: ColumnC contains the alarm name, ColumnA is the date/time of the alarm, and ColumnD has more detailed information about the info/alarm. This is a pretty decent recipe to follow to get the useful information in your notification. Select the \"Message Priority\" that you would like for this particular alarm type. Select the \"Device\" that you would like to receive this particular alarm type. The devices listed will be all your devices that have Pushover app installed and logged into. Click \"Create Action\" when you are finished. You'll now have made the IFTTT applet that will cause a Pushover notification to a particular device for a particular NS alarm, once the first applet records the alarm in the google spreadsheet. Keep the \"receive notification when this Applet runs\" toggled off and click the Finish button. Revisit Nightscout Alert Levels \u2301 Putting all these notifications together may cause you to want to revisit the alert levels you have set in your Heroku settings. Here's a short summary of NS for the looping-related alerts (Note: the last row, Upbat, is the Looping iPhone battery level for Loop users; or the rig's battery level for OpenAPS users.) If you'd like some of these alarms for your site and don't currently have them activated (they are all off by default unless specifically turned on), the lines you'd need to add are in the last column. If you like the default values of the WARN and/or URGENT, you don't have to add those extra lines...just the line to enable the alerts will be sufficient. SETTING DEFAULT WARN DEFAULT URGENT HEROKU SETTINGS CAGE 48 72 CAGE_ENABLE_ALERTS = true CAGE_WARN=XX CAGE_URGENT=XX SAGE 164 168 SAGE_ENABLE_ALERTS = true SAGE_WARN=XX SAGE_URGENT=XX IAGE 48 72 IAGE_ENABLE_ALERTS = true IAGE_WARN=XX IAGE_URGENT=XX LOOP 30 60 LOOP_ENABLE_ALERTS = true LOOP_WARN=XX LOOP_URGENT=XX OPENAPS 30 60 OPENAPS_ENABLE_ALERTS = true OPENAPS_WARN=XX OPENAPS_URGENT=XX PUMP_CLOCK 30 60 PUMP_ENABLE_ALERTS = true PUMP_WARN_CLOCK=XX PUMP_URGENT_CLOCK=XX PUMP_RES 10 5 PUMP_ENABLE_ALERTS = true PUMP_WARN_RES=XX PUMP_URGENT_RES=XX PUMP_BATT_P 30 20 PUMP_ENABLE_ALERTS = true PUMP_WARN_BATT_P=XX PUMP_URGENT_BATT_P=XX PUMP_BATT_V 1.35 1.30 PUMP_ENABLE_ALERTS = true PUMP_WARN_BATT_V=XX PUMP_URGENT_BATT_V=XX UPBAT 30 20 UPBAT_ENABLE_ALERTS = true UPBAT_WARN=XX UPBAT_URGENT=XX Final notes \u2301 You can use other notification services than Pushover in the last part of the second applet. For example, you could use the SMS service to send text notifications to your iPhone instead of Pushover. The downside for that is that the SMS service is limited to 100 message each month...some users may exceed that pretty easily. Another alternative notification would be IFTTT's own Notification service. This would work well, but does not have the ability to distinguish between devices the way Pushover allows. If you use IFTTT's Notifications service, every phone using your IFTTT account will get the notices. To be clear, you do NOT need to have pushover on your ENABLE line nor have PUSHOVER_USER_KEY , PUSHOVER_API_TOKEN , or PUSHOVER_ANNOUNCEMENT_KEY entered into your Heroku settings in order for any of the above to work. This is not the same Pushover as NS has integrated into its code. This is actually through IFTTT services, you just need a Pushover account to link to during the 2nd applet setup. To create more notifications, simply repeat the steps for the 2nd applet you created, only this time use a new filename that corresponds to the spreadsheet tracking the alert you'd like notifications for. You'll end up with multiple applets of the dark blue type (the pushover notifiers) and only a single light blue (NS alarm general collector). Here are examples of the Meal Bolus and Temp Basal ns-event logging spreadsheets The 1st applet can only create up to 2000 active rows in a given spreadsheet. After that, the applet will automatically create a new spreadsheet. For most alarms, it may take quite some time to reach 2000 rows of info. For other alerts, such as temp basals being set, that may fill up rather fast for the average looper. You can either clean out the data rows periodically to make room, or update your filename in the 2nd applet periodically when a new spreadsheet is made.","title":"Remote Notifications"},{"location":"nightscout/pushover/#remote-notifications","text":"While Loop app currently sends notifications locally on Loop user's iPhone, parents and caregivers likely want those messages on their phones, too. We can achieve this functionality through a combination of Nightscout, IFTTT, Google, and Pushover. Traditionally, most people may already know of Pushover alerts through their NS site. The old Loop docs had set up for how to add your PUSHOVER_ANNOUNCEMENT_KEY , PUSHOVER_API_TOKEN , and PUSHOVER_USER_KEY in your Heroku settings to get notifications on the non-looping phones of parents and caregivers. The drawback for that method is that you could not necessarily fine-tune the alerts (maybe you wanted battery alarms on your NS website, but not get pushovers for them...a bit hard to separate out the environments that way) and Pushover had a demanding acknowledgment requirement. If you failed to acknowledge an alert, you may end up getting alarm fatigue fairly quickly as the alarm repeated itself. Using Pushover THROUGH IFTTT however, we can improve the possible notifications and who receives which ones. For example, a teenage Looper may want notifications when his/her pump site needs changing and when his/her Dexcom is about to expire in the next day. S/he already gets local notifications on his/her phone via Loop for low reservoir volumes, low pump battery, and Loop failures. Dexcom app provides high/low BG notifications locally, too. If s/he were to get those same alarms via Pushover, s/he would inevitably get alarm fatigue. A remotely-monitoring parent may want additional information, like a pushover alert when the school nurse boluses for lunch, as well as Loop failures, low iPhone battery level for the child, low pump battery, and other such information that might be useful. Perhaps there's also an emergency contact person that you only want to get high/low BG alerts...you can set that up as well quite easily. The basic concept is that NS puts out an event that triggers the IFTTT service called Webhooks (old name was \"Maker Webhooks\" hence you may see references to \"maker\" in NS docs). Actually, there are several types of events that NS has programmed in all ready to use in IFTTT. For this setup, we are going to use the most general logging event called ns-event . You'll get all the alarms and notifications logged, and then you can decide in subsequent steps which ones you'd actually like to send to your phone for pushover notification. As a brief roadmap for what we are going to do: Get necessary accounts setup Add a folder to your Google Drive Make an IFTTT applet to log NS events to your Google Spreadsheets Enable NS to work with that new IFTTT applet Make an IFTTT applet to send Pushover alert when the Google Spreadsheet is updated","title":"Remote notifications"},{"location":"nightscout/pushover/#get-prepped","text":"If you don't already have these steps done, you will need them. Skip any that you already have done. Setup a Nightscout site Get an IFTTT account Get a Pushover Account Get a Google Account Download the Pushover app onto your phone, and any other phone you'd like to receive Pushover alerts Download the IFTTT app onto your phone, and any other phone you'd like to use IFTTT applets on Login to the Pushover and IFTTT apps with your login information","title":"Get Prepped"},{"location":"nightscout/pushover/#add-a-google-drive-folder","text":"Login to your Google account and select Google Drive Click on the blue \"New\" button and create a new folder named IFTTT. Double click on the newly created IFTTT folder, select the blue \"New\" button again, and create a new subfolder called \"Nightscout-Alarms\" This IFTTT/Nightscout-Alarms folder will eventually contain numerous Google Spreadsheets, one for each NS alarm or information that is logged. As new alarms are triggered, the IFTTT applet we are about to write will add a row to the appropriate spreadsheet logging the time of the alarm and any other reported details that go with the entry. For now though, your drive will be blank...screenshot below just to give you an idea of where we are going.","title":"Add a Google Drive folder"},{"location":"nightscout/pushover/#make-1st-ifttt-applet-to-log-ns-alarms","text":"Login to your IFTTT.com account and select the \"New Applet\" button. In the screen that appears, click on the blue \"+this\" part of the screen In the next screen, type \"webhooks\" in the search field and then click on the blue connect button If this is the first time you are using IFTTT Webhooks service, you will have a \"Connect\" button to select. If you already have IFTTT applets using Webhooks, you won't see this screen...just move to the next bullet. Click on the \"receive a web request\" blue box, and then fill in the Event Name as ns-event and then press the \"Create trigger\" button. (Side note: the event name used here corresponds to the triggers discussed above for core events that NS already has integrated for IFTTT users. If you want to, instead, use the other triggers such as ns-warn or ns-urgent, you can. This example is using the most general trigger so that the options are wider for most users.) Click on the blue \"+that\" text Enter google in the search field and click on the Google Sheets icon Select the green \"Add row to spreadsheet\" box Delete the contents of the \"Spreadsheet Name\" and \"Drive folder path\". For the \"Spreadsheet Name\", click the \"Add Ingredient\" button and select the \"Value1\". For the \"Drive folder path\", enter IFTTT/Nightscout-Alarms . You do not have to modify the \"Formatted row\" box's contents. Click the \"Create action\" button at the bottom. Turn off the toggle for receiving notifications when the applet runs, and then click the Finish button You'll now have the finished IFTTT applet that will cause a row to be added to a Google spreadsheet...tracking all your NS notifications and alarms. If it is the first time that alarm has been logged, the applet will also create the spreadsheet itself. After a while, your IFTTT/Nightscout-Alarms folder will start to look like the screenshot posted above with numerous spreadsheets for each alarm type.","title":"Make 1st IFTTT Applet to Log NS Alarms"},{"location":"nightscout/pushover/#enable-ifttt-webhooks-in-your-nightscout-site","text":"If you already have created IFTTT buttons previously to work with your NS site, you can skip this section. If those buttons are working, then you've already added your MAKER_KEY and \"maker\" to your ENABLE line in Heroku. To actually make that first applet work, we need to enter a \"Maker Key\" to get NS and IFTTT talking to each other. Find your Maker Key by going to your IFTTT account, Services and then clicking on Webhooks. (Your screen may not have as many services showing; the example account below just happens to already use several services.) You will see your Maker Key as the last part of the URL; copy that last part (the red circled part) Navigate to your Heroku account's settings tab, \"reveal config vars\" and (1) add your Maker Key to the MAKER_KEY line and (2) add \"maker\" to your ENABLE line.","title":"Enable IFTTT Webhooks in your Nightscout site"},{"location":"nightscout/pushover/#make-2nd-ifttt-applet-to-send-pushover-notifications","text":"In your IFTTT account, select the \"New Applet\" button. In the screen that appears, click on the blue \"+this\" part of the screen In the next screen, type \"google\" in the search field and then click on the \"Google Sheets\" logo. Click on the \"New row added to spreadsheet\" as the trigger. Enter the following information: Folder path is IFTTT/Nightscout-Alarms and for the filename you are going to enter the name of the particular NS alarm or information that you would like to get pushover alerts for. Click on the \"Create trigger\" button to save the trigger. This applet can't be created unless your filename (alarm spreadsheet) already exists. If your 1st applet we created above hasn't run for a long time, the spreadsheets may not exist yet because the alarms haven't triggered. You have two options...(1) manually create the file in your Google Drive so that you can finish the applet now or (2) wait several days/weeks for the alarms to happen and that will automatically create the files in your Google drive. If you choose option 1, here's a partial list of some of the filenames you could create in advance: Loop isn't looping Cannula age 48 hours Cannula age 72 hours Meal Bolus Warning, Pump Reservoir Low Warning Uploader Battery is Low Temporary Override Depending on your alert levels you specified in NS, some of the hours in the titles may vary to match your settings Click on the blue \"+that\" text Enter pushover in the search field and click on the Pushover icon. If this is your first time linking your IFTTT to Pushover, you will be prompted to enter your Pushover account login and allow IFTTT access. This only needs to be done once. Select the \"Send a Pushover notification\" box Delete the contents of the \"Title\" and \"Message\" and \"URL\" boxes. For the Title, click the \"Add Ingredient\" button and add ColumnC . For the \"Message\", click the \"Add Ingredient\" button and add the values of various columns from your spreadsheet for the information you would like to include. For the alerts: ColumnC contains the alarm name, ColumnA is the date/time of the alarm, and ColumnD has more detailed information about the info/alarm. This is a pretty decent recipe to follow to get the useful information in your notification. Select the \"Message Priority\" that you would like for this particular alarm type. Select the \"Device\" that you would like to receive this particular alarm type. The devices listed will be all your devices that have Pushover app installed and logged into. Click \"Create Action\" when you are finished. You'll now have made the IFTTT applet that will cause a Pushover notification to a particular device for a particular NS alarm, once the first applet records the alarm in the google spreadsheet. Keep the \"receive notification when this Applet runs\" toggled off and click the Finish button.","title":"Make 2nd IFTTT Applet to send Pushover notifications"},{"location":"nightscout/pushover/#revisit-nightscout-alert-levels","text":"Putting all these notifications together may cause you to want to revisit the alert levels you have set in your Heroku settings. Here's a short summary of NS for the looping-related alerts (Note: the last row, Upbat, is the Looping iPhone battery level for Loop users; or the rig's battery level for OpenAPS users.) If you'd like some of these alarms for your site and don't currently have them activated (they are all off by default unless specifically turned on), the lines you'd need to add are in the last column. If you like the default values of the WARN and/or URGENT, you don't have to add those extra lines...just the line to enable the alerts will be sufficient. SETTING DEFAULT WARN DEFAULT URGENT HEROKU SETTINGS CAGE 48 72 CAGE_ENABLE_ALERTS = true CAGE_WARN=XX CAGE_URGENT=XX SAGE 164 168 SAGE_ENABLE_ALERTS = true SAGE_WARN=XX SAGE_URGENT=XX IAGE 48 72 IAGE_ENABLE_ALERTS = true IAGE_WARN=XX IAGE_URGENT=XX LOOP 30 60 LOOP_ENABLE_ALERTS = true LOOP_WARN=XX LOOP_URGENT=XX OPENAPS 30 60 OPENAPS_ENABLE_ALERTS = true OPENAPS_WARN=XX OPENAPS_URGENT=XX PUMP_CLOCK 30 60 PUMP_ENABLE_ALERTS = true PUMP_WARN_CLOCK=XX PUMP_URGENT_CLOCK=XX PUMP_RES 10 5 PUMP_ENABLE_ALERTS = true PUMP_WARN_RES=XX PUMP_URGENT_RES=XX PUMP_BATT_P 30 20 PUMP_ENABLE_ALERTS = true PUMP_WARN_BATT_P=XX PUMP_URGENT_BATT_P=XX PUMP_BATT_V 1.35 1.30 PUMP_ENABLE_ALERTS = true PUMP_WARN_BATT_V=XX PUMP_URGENT_BATT_V=XX UPBAT 30 20 UPBAT_ENABLE_ALERTS = true UPBAT_WARN=XX UPBAT_URGENT=XX","title":"Revisit Nightscout Alert Levels"},{"location":"nightscout/pushover/#final-notes","text":"You can use other notification services than Pushover in the last part of the second applet. For example, you could use the SMS service to send text notifications to your iPhone instead of Pushover. The downside for that is that the SMS service is limited to 100 message each month...some users may exceed that pretty easily. Another alternative notification would be IFTTT's own Notification service. This would work well, but does not have the ability to distinguish between devices the way Pushover allows. If you use IFTTT's Notifications service, every phone using your IFTTT account will get the notices. To be clear, you do NOT need to have pushover on your ENABLE line nor have PUSHOVER_USER_KEY , PUSHOVER_API_TOKEN , or PUSHOVER_ANNOUNCEMENT_KEY entered into your Heroku settings in order for any of the above to work. This is not the same Pushover as NS has integrated into its code. This is actually through IFTTT services, you just need a Pushover account to link to during the 2nd applet setup. To create more notifications, simply repeat the steps for the 2nd applet you created, only this time use a new filename that corresponds to the spreadsheet tracking the alert you'd like notifications for. You'll end up with multiple applets of the dark blue type (the pushover notifiers) and only a single light blue (NS alarm general collector). Here are examples of the Meal Bolus and Temp Basal ns-event logging spreadsheets The 1st applet can only create up to 2000 active rows in a given spreadsheet. After that, the applet will automatically create a new spreadsheet. For most alarms, it may take quite some time to reach 2000 rows of info. For other alerts, such as temp basals being set, that may fill up rather fast for the average looper. You can either clean out the data rows periodically to make room, or update your filename in the 2nd applet periodically when a new spreadsheet is made.","title":"Final notes"},{"location":"nightscout/remote-overrides/","text":"Setup Remote Overrides \u2301 You can now use your Nightscout site to remotely set and cancel your override presets in your Loop app. What?! Yes, really...you can set/cancel an override remotely for your child's Loop. (This feature does require that you built your Loop app using a paid Apple developer account, just FYI.) What you will need to do.. Update your Loop app (if you haven't done that since October 13, 2019 when remote overrides first became available) Create a Key for an Apple Push Notifications service (APNs) Update your Nightscout site and add some \"config vars\" lines in your Heroku settings. Step 1: Updating Loop app and iPhone settings \u2301 Remote overrides were in dev branch of Loop beginning October 13, 2019 and in master branch as of December 31, 2019. If you built one of those branches before those dates, you'll need to update your Loop app to be able to access remote overrides. Be sure to review all the steps for updating your Loop app here . iPhone settings specific for remote overrides For remote overrides to successfully deploy on a Looper's iPhone, they will need to have two settings on the iPhone enabled. First, Loop's slider in iPhone Settings, Notifications needs to be turned on. Without notifications, the person trying to set a remote override will see the message about \"no deviceToken\" and no remote override will actually enact. Second, the Looper's iphone needs the slide on in iPhone Settings, General, Background App Refresh. If this is not enabled, the remote overrides will not enact if the Loop app is not actively open on the phone's main screen. Step 2: Apple Push Notifications \u2301 The next part of this will help your Loop app give permissions to your Nightscout site to remotely interact with it. 1. Login to your Apple developer account with the Apple ID associated with your developer team that you used to sign your Loop app. 2. Click on \"Certificates, Indentifiers & Profiles\" and then, on the next page, click on \"Keys\" (located on the left-hand column). Click on the blue \"Create a new key\" OR the \"+\" icon to add a new key. 3. In the form that appears, click the checkbox for enabling \"Apple Push Notifications service (APNs)\" and enter a name for the key such as \"Nightscout\". Then click the \"Continue\" button in the upper right of the screen. 4. In the screen that follows, click the blue \"Register\" button. 5. In the screen that follows, click the blue \"Download\" button. This step will download a file with a name that starts with \"AuthKey\" and ends with \".p8\". 6. Find your AuthKey download in your downloads folder. Double-click to open it and you will be presented a message asking how you'd like to open it. Click on \"Choose Application...\" and then select \"TextEdit\" as your application to open it with. 7. When the file opens, it will look similar to the screenshot below. In a few minutes, after we do a few other steps first, we will need to highlight ALL OF THE CONTENTS of that file and copy it because we will be pasting it in Heroku. Yes, allllll of the contents. So, easiest way is to click inside that file and then press command-a to highlight all the text and then command-c to copy it all to the clipboard. You don't have to do it right now...just keep that window open in the background for now until we need it a little further down. Then we will copy all that text. Step 3: Update Nightscout site \u2301 You'll need to update your Nightscout site to use the latest version of cgm-remote-monitor. It is called Ketchup and the version number is 13.0.1. You can check your version number by looking at the bottom of your NS site's settings, near where the authentication button is located. The easiest way to do to update your Nightscout site is to follow the steps in the video below. Use this video for an easy process to update your Nightscout site: Easy Nightscout Update Video A quick note about the video instructions: If you don't see any branches to select to deploy and are missing the deploy button when you get to that step...you need to do one easy step. Select/click the \"GitHub\" icon from the middle of your Heroku screen. Then enter your GitHub account name to connect to that account. Once connected to your account, enter cgm-remote-monitor as the repo you'd like to use to connect with specifically. That will fix the issue and you'll then see the deploy buttons like in the video. Once you have your Nightscout deployment updated to the latest master branch of cgm-remote-monitor, now we need to add a couple new variables. Go to the Settings tab near the top of the screen on your Heroku app and then click on Reveal Config Vars . Scroll down the bottom of the Config Vars lines until you find the last blank one. You are going to add three new rows of config vars for remote overrides as shown below: KEY VALUE LOOP_APNS_KEY enter ENTIRE contents of the downloaded .p8 file including the BEGIN and END lines. Here's where you can use the command-a and command-c to hightlight and copy all the text in that file so you can paste it into Heroku here for this new variable you are creating. LOOP_APNS_KEY_ID string of characters on the .p8 download file immediately following the underscore ( _ ) and not including the file extension ( .p8 ), or you can get it from your saved key in your developer account as shown next step, too LOOP_DEVELOPER_TEAM_ID get this value from Loop app signing or in your developer account's top right corner under your name When executed properly, you should have something that looks like this for your three new variables that you added: Step 4: FAQs on Remote Overrides \u2301 Don't forget to read Loopdocs pages about how regular overrides work. For remote overrides in particular: Can I set different override in Nighscout than I have programmed into Loop app? Answer: No. You will only be able to enact override presets already programmed into the Loop app. If I didn't start the override in Nightscout (it was started in Loop itself), can I still use Nightscout to cancel it? Answer: Yes. You can cancel a Loop-set override with a Nightscout-set cancel \"temporary override\" command in careportal. \"Can I override a Loop-set override with a Nightscout-set override?\" Answer: Yes. If I have multiple Nightscout sites because I have multiple kiddos with T1D looping, do I need multiple APNs Keys? Answer: No. If you have multiple kids looping, you can use the one APNs key in each of their Nightscout sites. How can I tell if it worked? Answer: You should see your override pill in Nightscout, with the NEXT Loop cycle, reflecting that the desired override action took place. If you are near the Loop app, you should see the new override within less than 30 seconds or so. Can I set see on Nightscout when a temporary override has been set using the looper\u2019s phone? Yes. There will be a grey bar with the name of the override noted and the Loop Pill will display the targets and duration. Remember, there is a KNOWN issue with the grey bars, so use the pill as your best guide. Can a looper cancel a remote override ? Yes. They can tap the heart icon in Loop so that it is no longer highlighted. This turns off the override, regardless of where it was initiated. I set a remote override in Nightscout but the looper tapped the heart symbol in the Loop app, so the override turned off. Will the override get reinstated next time Loop completes with internet access? No. The APN is only sent once. You can set the remote override again if need be. Can I schedule a remote override ahead of time using Nightscout? No. When you set a remote override in Nightscout, it will begin immediately and last for whatever duration is programmed for that override in the Loop app. You can set an override for ahead of time using the Looping App only. Step 5: Using Remote Overrides \u2301 There are three ways you can trigger your override presets remotely; careportal, Shortcuts, and IFTTT. Careportal \u2301 To use remote overrides, I'm assuming you've setup your Nightscout site according to the directions here in Loopdocs. Especially the part about your ENABLE line including \"override careportal loop\" (in addition to other variables you'd be interested in). You'll also need to have your site authenticated so that your careportal is active to send remote overrides. You can authenticate your site by selecting the three horizontal lines in the upper right corner of your Nightscout site and scrolling to the bottom of the settings. There's an \"authenicate\" link at the very bottom. Once authenticated by entering your API Secret, then there will be a + in the upper right corner of your site. That is your careportal. Tap the careportal + and then scroll down in the \"event type\" menu to find \"Temporary Override\". Within there, you will find all your Loop override presets already loaded for you. The Looper will see a banner notification that an override has been set (or canceled, as the case may be). Canceling an override through Nightscout careportal is as simple as selecting the event type \"Temporary Override Cancel\" and submitting. Shortcuts \u2301 If you want to make your life SUPER AMAZING, check out using the iPhone's Shortcuts app. The Shortcuts app is for making little automations (like mini apps) that can integrate parts of your life. In this case, we've written a couple shortcuts for you that integrate Loop overrides with Nightscout. Important note Before you click that download below...save some trouble. Download the Shortcuts app if you don't have it yet and choose to run any shortcut from the Gallery. It can be the laundry timer...I don't care, just pick one and run it. THEN go to download the shortcut of your choice below. The shortcuts that aren't run through the Gallery option are called \"untrusted\". And you need a slider in your iPhone to trust the \"untrusted\" shortcuts you would be downloading here. But...in lovely iOS glitch...that slider doesn't appear unless you've run a trusted shortcut first. So, run one now. Then you'll have the slider in iPhone Settings, Shortcuts app to turn \"Allow Untrusted Shortcuts\" on when you will see a message \"This shortcut cannot be opened because your Shortcuts security system settings don't allow untrusted shortcuts.\" Click these links on your iphone and you'll be prompted to download the premade shortcuts (assuming you open the links in Safari browser in iPhone): Comprehensive Loop Shortcut includes Set Remote Override, Cancel Override, Loop Troubleshooting Tips, Quick Text options, Manual BG entry, Bookmarks to websites, etc. And if you want to save one click to get to these one functions more directly: these shortcuts are simplified to offer only one function: Set Remote Override only shortcut Cancel Override only shortcut A couple notes about these shortcuts: You will need iOS 13 at a minimum on the phone you'd like to trigger these shortcuts from. Looper's phone can still be lower than iOS 13, but your phone as the shortcut user would need iOS 13. You need to open those links in the Safari browser on your iPhone. When you do that click the button to get the shortcut. Then wait a bit, and the shortcut's inner guts will be there...scroll ALL the way down to the bottom to click the button to save the untrusted shortcut. When you enter your Nightscout URL in the \"URL\" field of the Loop shortcut setup, make sure you don't include a trailing \"/\" or the API calls to Heroku will error out. When a remote override is set properly, you'll see an \"ok\" message displayed. If there is an error, you'll see an error message. Most errors will be that you have an API secret wrong (make sure there isn't a space at the end of you API Secret that you don't see) or you failed to do the steps to setup NS and update your Loop app as described in steps 1-3 above. You can absolutely customize these bits and pieces within the shortcut. Change the text messages, change the links...totally up to you. IFTTT \u2301 If you want to walk uphill both ways in the snow carrying bags of uneven groceries, you can also set overrides remotely by setting up IFTTT , too. Step 6: Known Issues \u2301 Just a brief mention so you are aware: The override pill will display information about what override is currently active in the Looper's phone. BUT, there can be a slight delay as that information is only transmitted every 5 minutes at best (it is tied to Loop runs and Nightscout upload events in Loop). So, wait 5 minutes to see that the information has gone through a refresh cycle before assuming the override message failed to enact. When you add a new override preset in Loop, that preset has to be uploaded to Nightscout before it will be available as a remote override. To trigger that upload, you can simply enact that new override for a few seconds and turn it off again. that will get the Nightscout upload going. Step 7: Common Errors \u2301 Once you've set up remote overrides, you may encounter errors when trying to run them via Nightscout or iOS Shortcuts. Below are the most common and the typical solutions. Error: Loop notification failed: Could not find deviceToken in loopSettings You might see this in either Nightscout or Shortcuts. The error is most commonly caused by 3 issues: incorrect version of Loop, Loop is not pointing to the right Nightscout instance, or you haven't yet run an override locally (with the Loop app) before trying to run one remotely. Solution: check you have the latest version of the Dev branch installed, confirm the Loop app is pointing to the right Nightscout site (and there are not extra spaces or a slash (/) at the end, and always run an override for a few seconds in the Loop app before you try to run one remotely. Error: cannot POST/api/v2/notifications/loop You might see this in iOS Shortcuts. This means Nightscout is not updated correctly and you are running a version of Nightscout that doesn't yet support remote overrides. Solution: Follow the steps above again on how to update to the version of Nightscout that supports remote overrides. Error: {\u201cstatus\u201d:401,\u201dmessage\u201d:\u201dUnauthorized\u201d,\u201ddescription\u201d:Invalid\\/Missing\u201d} You might see this in iOS Shortcuts. This is caused by having the incorrect API Secret in the Shortcut. Solution: Double check the API Secret is correct and that there are no spaces at the end. Error: APNs delivery failed: InvalidProviderToken You might see this in either Nightscout or Shortcuts. This is caused because your LOOP_APNS_KEY_ID and LOOP_DEVELOPER_TEAM_ID are swapped in Heroku. Solution: Double check what's listed in your Apple Developer Account and compare to the config variables in Heroku. Your Team_ID is next to your name in the top right corner. The other code is your Key_ID. Get the IDs in the correct location in Heroku to resolve the error.","title":"Remote Overrides"},{"location":"nightscout/remote-overrides/#setup-remote-overrides","text":"You can now use your Nightscout site to remotely set and cancel your override presets in your Loop app. What?! Yes, really...you can set/cancel an override remotely for your child's Loop. (This feature does require that you built your Loop app using a paid Apple developer account, just FYI.) What you will need to do.. Update your Loop app (if you haven't done that since October 13, 2019 when remote overrides first became available) Create a Key for an Apple Push Notifications service (APNs) Update your Nightscout site and add some \"config vars\" lines in your Heroku settings.","title":"Setup Remote Overrides"},{"location":"nightscout/remote-overrides/#step-1-updating-loop-app-and-iphone-settings","text":"Remote overrides were in dev branch of Loop beginning October 13, 2019 and in master branch as of December 31, 2019. If you built one of those branches before those dates, you'll need to update your Loop app to be able to access remote overrides. Be sure to review all the steps for updating your Loop app here . iPhone settings specific for remote overrides For remote overrides to successfully deploy on a Looper's iPhone, they will need to have two settings on the iPhone enabled. First, Loop's slider in iPhone Settings, Notifications needs to be turned on. Without notifications, the person trying to set a remote override will see the message about \"no deviceToken\" and no remote override will actually enact. Second, the Looper's iphone needs the slide on in iPhone Settings, General, Background App Refresh. If this is not enabled, the remote overrides will not enact if the Loop app is not actively open on the phone's main screen.","title":"Step 1: Updating Loop app and iPhone settings"},{"location":"nightscout/remote-overrides/#step-2-apple-push-notifications","text":"The next part of this will help your Loop app give permissions to your Nightscout site to remotely interact with it. 1. Login to your Apple developer account with the Apple ID associated with your developer team that you used to sign your Loop app. 2. Click on \"Certificates, Indentifiers & Profiles\" and then, on the next page, click on \"Keys\" (located on the left-hand column). Click on the blue \"Create a new key\" OR the \"+\" icon to add a new key. 3. In the form that appears, click the checkbox for enabling \"Apple Push Notifications service (APNs)\" and enter a name for the key such as \"Nightscout\". Then click the \"Continue\" button in the upper right of the screen. 4. In the screen that follows, click the blue \"Register\" button. 5. In the screen that follows, click the blue \"Download\" button. This step will download a file with a name that starts with \"AuthKey\" and ends with \".p8\". 6. Find your AuthKey download in your downloads folder. Double-click to open it and you will be presented a message asking how you'd like to open it. Click on \"Choose Application...\" and then select \"TextEdit\" as your application to open it with. 7. When the file opens, it will look similar to the screenshot below. In a few minutes, after we do a few other steps first, we will need to highlight ALL OF THE CONTENTS of that file and copy it because we will be pasting it in Heroku. Yes, allllll of the contents. So, easiest way is to click inside that file and then press command-a to highlight all the text and then command-c to copy it all to the clipboard. You don't have to do it right now...just keep that window open in the background for now until we need it a little further down. Then we will copy all that text.","title":"Step 2: Apple Push Notifications"},{"location":"nightscout/remote-overrides/#step-3-update-nightscout-site","text":"You'll need to update your Nightscout site to use the latest version of cgm-remote-monitor. It is called Ketchup and the version number is 13.0.1. You can check your version number by looking at the bottom of your NS site's settings, near where the authentication button is located. The easiest way to do to update your Nightscout site is to follow the steps in the video below. Use this video for an easy process to update your Nightscout site: Easy Nightscout Update Video A quick note about the video instructions: If you don't see any branches to select to deploy and are missing the deploy button when you get to that step...you need to do one easy step. Select/click the \"GitHub\" icon from the middle of your Heroku screen. Then enter your GitHub account name to connect to that account. Once connected to your account, enter cgm-remote-monitor as the repo you'd like to use to connect with specifically. That will fix the issue and you'll then see the deploy buttons like in the video. Once you have your Nightscout deployment updated to the latest master branch of cgm-remote-monitor, now we need to add a couple new variables. Go to the Settings tab near the top of the screen on your Heroku app and then click on Reveal Config Vars . Scroll down the bottom of the Config Vars lines until you find the last blank one. You are going to add three new rows of config vars for remote overrides as shown below: KEY VALUE LOOP_APNS_KEY enter ENTIRE contents of the downloaded .p8 file including the BEGIN and END lines. Here's where you can use the command-a and command-c to hightlight and copy all the text in that file so you can paste it into Heroku here for this new variable you are creating. LOOP_APNS_KEY_ID string of characters on the .p8 download file immediately following the underscore ( _ ) and not including the file extension ( .p8 ), or you can get it from your saved key in your developer account as shown next step, too LOOP_DEVELOPER_TEAM_ID get this value from Loop app signing or in your developer account's top right corner under your name When executed properly, you should have something that looks like this for your three new variables that you added:","title":"Step 3: Update Nightscout site"},{"location":"nightscout/remote-overrides/#step-4-faqs-on-remote-overrides","text":"Don't forget to read Loopdocs pages about how regular overrides work. For remote overrides in particular: Can I set different override in Nighscout than I have programmed into Loop app? Answer: No. You will only be able to enact override presets already programmed into the Loop app. If I didn't start the override in Nightscout (it was started in Loop itself), can I still use Nightscout to cancel it? Answer: Yes. You can cancel a Loop-set override with a Nightscout-set cancel \"temporary override\" command in careportal. \"Can I override a Loop-set override with a Nightscout-set override?\" Answer: Yes. If I have multiple Nightscout sites because I have multiple kiddos with T1D looping, do I need multiple APNs Keys? Answer: No. If you have multiple kids looping, you can use the one APNs key in each of their Nightscout sites. How can I tell if it worked? Answer: You should see your override pill in Nightscout, with the NEXT Loop cycle, reflecting that the desired override action took place. If you are near the Loop app, you should see the new override within less than 30 seconds or so. Can I set see on Nightscout when a temporary override has been set using the looper\u2019s phone? Yes. There will be a grey bar with the name of the override noted and the Loop Pill will display the targets and duration. Remember, there is a KNOWN issue with the grey bars, so use the pill as your best guide. Can a looper cancel a remote override ? Yes. They can tap the heart icon in Loop so that it is no longer highlighted. This turns off the override, regardless of where it was initiated. I set a remote override in Nightscout but the looper tapped the heart symbol in the Loop app, so the override turned off. Will the override get reinstated next time Loop completes with internet access? No. The APN is only sent once. You can set the remote override again if need be. Can I schedule a remote override ahead of time using Nightscout? No. When you set a remote override in Nightscout, it will begin immediately and last for whatever duration is programmed for that override in the Loop app. You can set an override for ahead of time using the Looping App only.","title":"Step 4: FAQs on Remote Overrides"},{"location":"nightscout/remote-overrides/#step-5-using-remote-overrides","text":"There are three ways you can trigger your override presets remotely; careportal, Shortcuts, and IFTTT.","title":"Step 5: Using Remote Overrides"},{"location":"nightscout/remote-overrides/#careportal","text":"To use remote overrides, I'm assuming you've setup your Nightscout site according to the directions here in Loopdocs. Especially the part about your ENABLE line including \"override careportal loop\" (in addition to other variables you'd be interested in). You'll also need to have your site authenticated so that your careportal is active to send remote overrides. You can authenticate your site by selecting the three horizontal lines in the upper right corner of your Nightscout site and scrolling to the bottom of the settings. There's an \"authenicate\" link at the very bottom. Once authenticated by entering your API Secret, then there will be a + in the upper right corner of your site. That is your careportal. Tap the careportal + and then scroll down in the \"event type\" menu to find \"Temporary Override\". Within there, you will find all your Loop override presets already loaded for you. The Looper will see a banner notification that an override has been set (or canceled, as the case may be). Canceling an override through Nightscout careportal is as simple as selecting the event type \"Temporary Override Cancel\" and submitting.","title":"Careportal"},{"location":"nightscout/remote-overrides/#shortcuts","text":"If you want to make your life SUPER AMAZING, check out using the iPhone's Shortcuts app. The Shortcuts app is for making little automations (like mini apps) that can integrate parts of your life. In this case, we've written a couple shortcuts for you that integrate Loop overrides with Nightscout. Important note Before you click that download below...save some trouble. Download the Shortcuts app if you don't have it yet and choose to run any shortcut from the Gallery. It can be the laundry timer...I don't care, just pick one and run it. THEN go to download the shortcut of your choice below. The shortcuts that aren't run through the Gallery option are called \"untrusted\". And you need a slider in your iPhone to trust the \"untrusted\" shortcuts you would be downloading here. But...in lovely iOS glitch...that slider doesn't appear unless you've run a trusted shortcut first. So, run one now. Then you'll have the slider in iPhone Settings, Shortcuts app to turn \"Allow Untrusted Shortcuts\" on when you will see a message \"This shortcut cannot be opened because your Shortcuts security system settings don't allow untrusted shortcuts.\" Click these links on your iphone and you'll be prompted to download the premade shortcuts (assuming you open the links in Safari browser in iPhone): Comprehensive Loop Shortcut includes Set Remote Override, Cancel Override, Loop Troubleshooting Tips, Quick Text options, Manual BG entry, Bookmarks to websites, etc. And if you want to save one click to get to these one functions more directly: these shortcuts are simplified to offer only one function: Set Remote Override only shortcut Cancel Override only shortcut A couple notes about these shortcuts: You will need iOS 13 at a minimum on the phone you'd like to trigger these shortcuts from. Looper's phone can still be lower than iOS 13, but your phone as the shortcut user would need iOS 13. You need to open those links in the Safari browser on your iPhone. When you do that click the button to get the shortcut. Then wait a bit, and the shortcut's inner guts will be there...scroll ALL the way down to the bottom to click the button to save the untrusted shortcut. When you enter your Nightscout URL in the \"URL\" field of the Loop shortcut setup, make sure you don't include a trailing \"/\" or the API calls to Heroku will error out. When a remote override is set properly, you'll see an \"ok\" message displayed. If there is an error, you'll see an error message. Most errors will be that you have an API secret wrong (make sure there isn't a space at the end of you API Secret that you don't see) or you failed to do the steps to setup NS and update your Loop app as described in steps 1-3 above. You can absolutely customize these bits and pieces within the shortcut. Change the text messages, change the links...totally up to you.","title":"Shortcuts"},{"location":"nightscout/remote-overrides/#ifttt","text":"If you want to walk uphill both ways in the snow carrying bags of uneven groceries, you can also set overrides remotely by setting up IFTTT , too.","title":"IFTTT"},{"location":"nightscout/remote-overrides/#step-6-known-issues","text":"Just a brief mention so you are aware: The override pill will display information about what override is currently active in the Looper's phone. BUT, there can be a slight delay as that information is only transmitted every 5 minutes at best (it is tied to Loop runs and Nightscout upload events in Loop). So, wait 5 minutes to see that the information has gone through a refresh cycle before assuming the override message failed to enact. When you add a new override preset in Loop, that preset has to be uploaded to Nightscout before it will be available as a remote override. To trigger that upload, you can simply enact that new override for a few seconds and turn it off again. that will get the Nightscout upload going.","title":"Step 6: Known Issues"},{"location":"nightscout/remote-overrides/#step-7-common-errors","text":"Once you've set up remote overrides, you may encounter errors when trying to run them via Nightscout or iOS Shortcuts. Below are the most common and the typical solutions. Error: Loop notification failed: Could not find deviceToken in loopSettings You might see this in either Nightscout or Shortcuts. The error is most commonly caused by 3 issues: incorrect version of Loop, Loop is not pointing to the right Nightscout instance, or you haven't yet run an override locally (with the Loop app) before trying to run one remotely. Solution: check you have the latest version of the Dev branch installed, confirm the Loop app is pointing to the right Nightscout site (and there are not extra spaces or a slash (/) at the end, and always run an override for a few seconds in the Loop app before you try to run one remotely. Error: cannot POST/api/v2/notifications/loop You might see this in iOS Shortcuts. This means Nightscout is not updated correctly and you are running a version of Nightscout that doesn't yet support remote overrides. Solution: Follow the steps above again on how to update to the version of Nightscout that supports remote overrides. Error: {\u201cstatus\u201d:401,\u201dmessage\u201d:\u201dUnauthorized\u201d,\u201ddescription\u201d:Invalid\\/Missing\u201d} You might see this in iOS Shortcuts. This is caused by having the incorrect API Secret in the Shortcut. Solution: Double check the API Secret is correct and that there are no spaces at the end. Error: APNs delivery failed: InvalidProviderToken You might see this in either Nightscout or Shortcuts. This is caused because your LOOP_APNS_KEY_ID and LOOP_DEVELOPER_TEAM_ID are swapped in Heroku. Solution: Double check what's listed in your Apple Developer Account and compare to the config variables in Heroku. Your Team_ID is next to your name in the top right corner. The other code is your Key_ID. Get the IDs in the correct location in Heroku to resolve the error.","title":"Step 7: Common Errors"},{"location":"nightscout/reports/","text":"Reports \u2301 Nightscout offers some fantastic data-crunching report tools in the settings area (the upper right corner, three horizontal lines). You can play around with various date ranges, target ranges, and provide reports to your endocrinologist to review.","title":"Reports"},{"location":"nightscout/reports/#reports","text":"Nightscout offers some fantastic data-crunching report tools in the settings area (the upper right corner, three horizontal lines). You can play around with various date ranges, target ranges, and provide reports to your endocrinologist to review.","title":"Reports"},{"location":"nightscout/troublehoot/","text":"Setup Troubleshooting \u2301 If you have just tried to set up your Nightscout site and have problems with seeing all your data, please check out the information below. Dexcom data not showing \u2301 If you are using a Dexcom system, and your data is not appearing in Nightscout, there are only a limited number of reasons for that. You should check your (1) Heroku settings and (2) Dexcom Share. NOTE: The #1 reason why BGs aren't showing is that you have mismatched password and user names in Heroku settings and Dexcom. Please see blue box below for that error. Heroku Settings \u2301 Login to your Heroku account and from within Heroku settings, click on the Reveal Config Vars Now from the Config Vars area, check the following (see screenshot below for reference): You must use the same BRIDGE_PASSWORD or BRIDGE_USER_NAME that your Dexcom mobile app is using. You must have bridge and careportal on the ENABLE line (you can have other values there...but don't forget these two). If you are outside the USA, you must add BRIDGE_SERVER set to EU in Heroku settings. Your careportal must be one word in the ENABLE line, sometimes autocorrect makes it two words. If using mmol , make sure you have spelled that value correctly in the DISPLAY_UNITS . One thing that can happen if you have an incorrect Dexcom login/password in Loop's CGM Share account settings and/or in your Nightscout BRIDGE settings is that Dexcom will lock your account...and you won't see CGM data in Nightscout. If you notice your CGM readings disappeared, but everything else is flowing...check your Heroku logs that are viewable by selecting \"View Logs\" from the drop-down menu underneath the \"More\" option. Do your logs have \"SSO authentication errors\" like in the red box highlighted above? If you do, then: Delete your share account entry from your Loop's CGM account settings...like you should have NO ENTRY in your share account settings WITHIN LOOP CGM SETTINGS. Delete your BRIDGE entries within Heroku settings. Don't delete the rows, just delete the entries within BRIDGE_PASSWORD and BRIDGE_USER_NAME. Wait 15 minutes and then follow the directions in the blue box below. It is important to wait the 15 minutes...the reason you can't log in right now is that your Dexcom account has a temporary lock from one of the passwords in step 1 or 2 being incorrect. The temporary lock will expire after 10-15 minutes of giving the account login a break from the incorrect logins. So, definitely wait or else you'll just keep prolonging the issue. About your Bridge password and user name The BRIDGE_PASSWORD and BRIDGE_USER_NAME are NOT visible from within your Dexcom mobile app or online account. The values of them are what you entered into your Dexcom mobile app when you VERY FIRST logged into that app however long ago. If you have double-checked everything else that could be incorrect and BGs still aren't showing in Nightscout, then you likely have those Bridge values incorrect. To fix that, delete your Dexcom app (don't stop the session before deleting the app...just keep it going). Download the app again from the iPhone's App Store and login to the freshly-downloaded Dexcom app. Take note that deleting the app will not stop your session, your session will pick right back up once the transmitter pairs again. The BRIDGE_USER_NAME is not an email address. Use that exact same login now in your Heroku settings. You can leave your Loop's Share account info blank...you just need the transmitter ID going forward. Dexcom Share \u2301 Make sure you have Dexcom Share turned ON in your Dexcom app. In the Dexcom app's main screen, find the triangle made of dots. If the dots are grey, you do not have Share turned on. Tap the triangle, and follow the directions to add a follower (yourself if you don't have someone else you'd like to invite) and turn on Share. Loop data not showing \u2301 If your BG data is showing, but Loop data is not (like Loop pill is empty and carbs and boluses are not showing), please delete your Nightscout account in Loop settings area. Enter the information in freshly. Make sure to use https:// to start the site URL. Make sure there is no trailing slash at the end of the URL. Make sure you have loop on the ENABLE line in Heroku settings.","title":"Setup Troubleshooting"},{"location":"nightscout/troublehoot/#setup-troubleshooting","text":"If you have just tried to set up your Nightscout site and have problems with seeing all your data, please check out the information below.","title":"Setup Troubleshooting"},{"location":"nightscout/troublehoot/#dexcom-data-not-showing","text":"If you are using a Dexcom system, and your data is not appearing in Nightscout, there are only a limited number of reasons for that. You should check your (1) Heroku settings and (2) Dexcom Share. NOTE: The #1 reason why BGs aren't showing is that you have mismatched password and user names in Heroku settings and Dexcom. Please see blue box below for that error.","title":"Dexcom data not showing"},{"location":"nightscout/troublehoot/#heroku-settings","text":"Login to your Heroku account and from within Heroku settings, click on the Reveal Config Vars Now from the Config Vars area, check the following (see screenshot below for reference): You must use the same BRIDGE_PASSWORD or BRIDGE_USER_NAME that your Dexcom mobile app is using. You must have bridge and careportal on the ENABLE line (you can have other values there...but don't forget these two). If you are outside the USA, you must add BRIDGE_SERVER set to EU in Heroku settings. Your careportal must be one word in the ENABLE line, sometimes autocorrect makes it two words. If using mmol , make sure you have spelled that value correctly in the DISPLAY_UNITS . One thing that can happen if you have an incorrect Dexcom login/password in Loop's CGM Share account settings and/or in your Nightscout BRIDGE settings is that Dexcom will lock your account...and you won't see CGM data in Nightscout. If you notice your CGM readings disappeared, but everything else is flowing...check your Heroku logs that are viewable by selecting \"View Logs\" from the drop-down menu underneath the \"More\" option. Do your logs have \"SSO authentication errors\" like in the red box highlighted above? If you do, then: Delete your share account entry from your Loop's CGM account settings...like you should have NO ENTRY in your share account settings WITHIN LOOP CGM SETTINGS. Delete your BRIDGE entries within Heroku settings. Don't delete the rows, just delete the entries within BRIDGE_PASSWORD and BRIDGE_USER_NAME. Wait 15 minutes and then follow the directions in the blue box below. It is important to wait the 15 minutes...the reason you can't log in right now is that your Dexcom account has a temporary lock from one of the passwords in step 1 or 2 being incorrect. The temporary lock will expire after 10-15 minutes of giving the account login a break from the incorrect logins. So, definitely wait or else you'll just keep prolonging the issue. About your Bridge password and user name The BRIDGE_PASSWORD and BRIDGE_USER_NAME are NOT visible from within your Dexcom mobile app or online account. The values of them are what you entered into your Dexcom mobile app when you VERY FIRST logged into that app however long ago. If you have double-checked everything else that could be incorrect and BGs still aren't showing in Nightscout, then you likely have those Bridge values incorrect. To fix that, delete your Dexcom app (don't stop the session before deleting the app...just keep it going). Download the app again from the iPhone's App Store and login to the freshly-downloaded Dexcom app. Take note that deleting the app will not stop your session, your session will pick right back up once the transmitter pairs again. The BRIDGE_USER_NAME is not an email address. Use that exact same login now in your Heroku settings. You can leave your Loop's Share account info blank...you just need the transmitter ID going forward.","title":"Heroku Settings"},{"location":"nightscout/troublehoot/#dexcom-share","text":"Make sure you have Dexcom Share turned ON in your Dexcom app. In the Dexcom app's main screen, find the triangle made of dots. If the dots are grey, you do not have Share turned on. Tap the triangle, and follow the directions to add a follower (yourself if you don't have someone else you'd like to invite) and turn on Share.","title":"Dexcom Share"},{"location":"nightscout/troublehoot/#loop-data-not-showing","text":"If your BG data is showing, but Loop data is not (like Loop pill is empty and carbs and boluses are not showing), please delete your Nightscout account in Loop settings area. Enter the information in freshly. Make sure to use https:// to start the site URL. Make sure there is no trailing slash at the end of the URL. Make sure you have loop on the ENABLE line in Heroku settings.","title":"Loop data not showing"},{"location":"nightscout/update_user/","text":"Adding Loop to Existing NS \u2301 Many people may already have an existing Nightscout site setup from before adding Loop to their management strategies. In order to make the most of your Looping setup, you will need to modify your existing Nightscout site a bit specifically for Loop. The process is pretty easy and should not take long. New Loopers Variables \u2301 The modifications for retrofitting an existing NS site for new Loop users will require you to make some edits to your Heroku site. There are five steps: Login to Heroku, Open Settings Tab Edit/Add Config Vars Open Nightscout Site Turn on Plugins Update Profile Settings Step 1: Login to Heroku, Settings Tab \u2301 Login to your Heroku account , select the Settings tab near the top of the screen on your Heroku app. Step 2: Edit/Add Config Vars \u2301 Click on Reveal Config Vars . Scroll down the bottom of the Config Vars lines until you find the last blank one. You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED and ENABLE lines are required, the others just make Nightscout more useful when Looping. ENABLE bridge loop pump iob cob basal careportal sage cage basal (Note: If you are an existing NS user, you likely already have an ENABLE line in this section of Heroku. Don't add a new one. Simply find the existing ENABLE line, click on the little pencil icon to the right of it, and add the words shown on the ENABLE line below to the existing words already on the enable line. Avoid duplicates. The remainder of the lines are likely going to be brand new additions to your Heroku settings.) DEVICESTATUS_ADVANCED true PUMP_FIELDS battery reservoir clock status PUMP_RETRO_FIELDS battery reservoir clock status SHOW_FORECAST loop SHOW_PLUGINS loop pump cob iob sage cage careportal PUMP_ENABLE_ALERTS true PUMP_URGENT_BATT_U 30 (This is the pump battery percentage that will trigger a red, urgent alert in NS.) PUMP_URGENT_BATT_V 1.25 (This is the pump battery voltage that will trigger a red, urgent alert in NS.) PUMP_URGENT_RES 10 (This is the reservoir volume that will trigger a red, urgent alert in NS.) PUMP_URGENT_CLOCK 30 LOOP_ENABLE_ALERTS true LOOP_WARN 20 (This is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app. This will be a yellow alert in NS.) LOOP_URGENT 60 (Same as the alert above, but will be red in color and have a shorter snooze option.) BASAL_RENDER default Step 3: Open Your NS Site \u2301 Click on Open App in the top right corner of your Heroku site. Step 4: Turn on Plugins \u2301 Click on the settings (those three horizontal lines in the upper right corner). Now check that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like display pills in the SHOW PLUGINS (usually all of them), and then click save. If you have not authenticated your site previously, you may be prompted to provide your API Secret prior to Nightscout saving your changes. Step 5: Update Profile Settings \u2301 Double-check that your NS Profile settings are current and that you have a basal profile entered, if you want to see the temp basals that Loop is setting. The values in your Nightscout Profile settings will not impact or affect your Loop, but it is just nice to have them match up in the event you are looking at your data with an endocrinologist or retrospectively looking at data. Nightscout Version Update \u2301 If you are new to Loop and haven\u2019t updated your NS site since before December 1, 2016, you will want to update your NS site. You can run either the \"master\" or \"dev\" branches of cgm-remote-monitor with Loop. To check what version your Nightscout site is running, go to your Nightscout site and pull open the site settings by clicking on the three horizontal lines at the top right of the screen. The version number is at the bottom. Nightscout has a tool to help you update your Nightscout site and you can find the directions using to the update tool here . Simply put, the Update tool will look at your GitHub repository and check if your Nightscout code is old and needs updating. You will have to be logged into your GitHub account in order for the tool to work, so do that before starting this process. You'll click on the green Continue updating at GitHub button, read the directions that will appear as a pop-up and then finish the update process. Click the big green Create pull request button. For most people, another screen will appear like shown in the screenshots below with a green Able to merge message. Fill in a title and click the button to create the pull request, and then you can Merge pull request , and finally Confirm merge . However, for some of you may encounter a red error message x Can't automatically merge message. If you have that message, you may want to post in FB for help on resolving that error message before proceeding any further. Your cgm-remote-monitor repository is now up-to-date. Nice work, and almost done. If you don\u2019t have your Heroku set-up to automatically update when your repository is updated, you will have to go into your Heroku Deploy section and manually deploy your branch now that your repository has been updated. Make sure you are connected to your GitHub cgm-remote-monitor repository.","title":"Retrofit Existing NS"},{"location":"nightscout/update_user/#adding-loop-to-existing-ns","text":"Many people may already have an existing Nightscout site setup from before adding Loop to their management strategies. In order to make the most of your Looping setup, you will need to modify your existing Nightscout site a bit specifically for Loop. The process is pretty easy and should not take long.","title":"Adding Loop to Existing NS"},{"location":"nightscout/update_user/#new-loopers-variables","text":"The modifications for retrofitting an existing NS site for new Loop users will require you to make some edits to your Heroku site. There are five steps: Login to Heroku, Open Settings Tab Edit/Add Config Vars Open Nightscout Site Turn on Plugins Update Profile Settings","title":"New Loopers Variables"},{"location":"nightscout/update_user/#step-1-login-to-heroku-settings-tab","text":"Login to your Heroku account , select the Settings tab near the top of the screen on your Heroku app.","title":"Step 1: Login to Heroku, Settings Tab"},{"location":"nightscout/update_user/#step-2-editadd-config-vars","text":"Click on Reveal Config Vars . Scroll down the bottom of the Config Vars lines until you find the last blank one. You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED and ENABLE lines are required, the others just make Nightscout more useful when Looping. ENABLE bridge loop pump iob cob basal careportal sage cage basal (Note: If you are an existing NS user, you likely already have an ENABLE line in this section of Heroku. Don't add a new one. Simply find the existing ENABLE line, click on the little pencil icon to the right of it, and add the words shown on the ENABLE line below to the existing words already on the enable line. Avoid duplicates. The remainder of the lines are likely going to be brand new additions to your Heroku settings.) DEVICESTATUS_ADVANCED true PUMP_FIELDS battery reservoir clock status PUMP_RETRO_FIELDS battery reservoir clock status SHOW_FORECAST loop SHOW_PLUGINS loop pump cob iob sage cage careportal PUMP_ENABLE_ALERTS true PUMP_URGENT_BATT_U 30 (This is the pump battery percentage that will trigger a red, urgent alert in NS.) PUMP_URGENT_BATT_V 1.25 (This is the pump battery voltage that will trigger a red, urgent alert in NS.) PUMP_URGENT_RES 10 (This is the reservoir volume that will trigger a red, urgent alert in NS.) PUMP_URGENT_CLOCK 30 LOOP_ENABLE_ALERTS true LOOP_WARN 20 (This is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app. This will be a yellow alert in NS.) LOOP_URGENT 60 (Same as the alert above, but will be red in color and have a shorter snooze option.) BASAL_RENDER default","title":"Step 2: Edit/Add Config Vars"},{"location":"nightscout/update_user/#step-3-open-your-ns-site","text":"Click on Open App in the top right corner of your Heroku site.","title":"Step 3: Open Your NS Site"},{"location":"nightscout/update_user/#step-4-turn-on-plugins","text":"Click on the settings (those three horizontal lines in the upper right corner). Now check that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like display pills in the SHOW PLUGINS (usually all of them), and then click save. If you have not authenticated your site previously, you may be prompted to provide your API Secret prior to Nightscout saving your changes.","title":"Step 4: Turn on Plugins"},{"location":"nightscout/update_user/#step-5-update-profile-settings","text":"Double-check that your NS Profile settings are current and that you have a basal profile entered, if you want to see the temp basals that Loop is setting. The values in your Nightscout Profile settings will not impact or affect your Loop, but it is just nice to have them match up in the event you are looking at your data with an endocrinologist or retrospectively looking at data.","title":"Step 5: Update Profile Settings"},{"location":"nightscout/update_user/#nightscout-version-update","text":"If you are new to Loop and haven\u2019t updated your NS site since before December 1, 2016, you will want to update your NS site. You can run either the \"master\" or \"dev\" branches of cgm-remote-monitor with Loop. To check what version your Nightscout site is running, go to your Nightscout site and pull open the site settings by clicking on the three horizontal lines at the top right of the screen. The version number is at the bottom. Nightscout has a tool to help you update your Nightscout site and you can find the directions using to the update tool here . Simply put, the Update tool will look at your GitHub repository and check if your Nightscout code is old and needs updating. You will have to be logged into your GitHub account in order for the tool to work, so do that before starting this process. You'll click on the green Continue updating at GitHub button, read the directions that will appear as a pop-up and then finish the update process. Click the big green Create pull request button. For most people, another screen will appear like shown in the screenshots below with a green Able to merge message. Fill in a title and click the button to create the pull request, and then you can Merge pull request , and finally Confirm merge . However, for some of you may encounter a red error message x Can't automatically merge message. If you have that message, you may want to post in FB for help on resolving that error message before proceeding any further. Your cgm-remote-monitor repository is now up-to-date. Nice work, and almost done. If you don\u2019t have your Heroku set-up to automatically update when your repository is updated, you will have to go into your Heroku Deploy section and manually deploy your branch now that your repository has been updated. Make sure you are connected to your GitHub cgm-remote-monitor repository.","title":"Nightscout Version Update"},{"location":"pages/hello.html/","text":"This is a page","title":"This is a Page"},{"location":"update/update/","text":"Updating Your Site to the Latest Version \u2301 Updating your website to the latest version (see here which is the current released version https://github.com/nightscout/cgm-remote-monitor/releases) is easy with the update tool linked below. Requirements \u2301 This version of Nightscout will probably not run on anything older than these versions/platforms: Android 4 iOS 9 Chrome 68 Edge 17 Firefox 61 Safari 10 (macOS 10.12) Opera 54 Internet Explorer: none Azure Users \u2301 As of 0.12, Nightscout no longer readily supports the free Azure platform. If you really want to keep using Azure, don\u2019t update to this version. Read this https://github.com/nightscout/cgm-remote-monitor/wiki/mLab-discontinuation-FAQ Step1: Update your repository in GitHub \u2301 Click here to log in at GitHub: https://github.com/login . Enter your username or email and your password. Click Sign in Select your own cgm-remote-monitor project (not nightscout/cgm-remote-monitor ) Your repository will open, note your GitHub username (hidden below in yellow). Scroll down until you see the Nightscout logo. Click Update your site Enter your GitHub username and click Check for updates If an update is available click Continue updating at GitHub Make sure you see GitHub user located! else check your username. If you know an update is available but you see Repo is Up to date , try the alternative method. A pop-up will open, just click OK (you can read the contents if you want, but this is explained below, so just click OK) Now comes the tricky part. Make sure the left hand side repository is yours (name hidden in yellow) and the right hand side is nightscout/cgm-remote-monitor , and click Create pull request . A pull request opens. Last chance to check the left hand side repository is yours (name hidden in yellow) and right hand side is nightscout/cgm-remote-monitor , write a comment in the field (example Update or whatever you like) Scroll down and click Create pull request Scroll all the way down (it might be far away) and click Merge pull request Click Confirm merge A new line will appear in the pull requests log showing merge succeeded Your GitHub repository will show you're one commit ahead of the released version You have successfully updated your GitHub repository, now let's deploy it in Heroku. Step2: Deploy in Heroku \u2301 Log in Heroku https://id.heroku.com/login Select your app (hidden in yellow) Note: see this mLab message? Time to migrate to Atlas, it's mandatory! Click on Deploy Verify Heroku is connected to GitHub, if not, click Connect to GitHub If Heroku is not connected to GitHub, scroll down and click Connect to GitHub , if a popup window opens and requires authorization, click Authorize Heroku Verify your app cgm-remote-monitor is connected to GitHub If it isn't, In Connect to GitHub , type cgm-remote-monitor and click Search then click Connect If you have trouble connecting your app, click Disconnect and reconnect it as shown above Scroll down to the bottom of the page, select the master branch and click Deploy Branch Build will start and information will scroll in the log window. Do not leave the page, do not interfere and wait for completion. It might take more than 10 minutes. Interrupting the process will lead to a broken site and you'll need to restart deployment. Wait until the deploy process completes and click View Your site will open and should be at the latest version. You're done! Else, if you ran into trouble, try the alternative method below. Alternative method \u2301 Click here to log in at GitHub: https://github.com/login . Enter your username or email and your password. Click Sign in Select your own cgm-remote-monitor project (not nightscout/cgm-remote-monitor ) Click Settings Scroll down to Danger zone and click Delete this repository Copy and paste your full repository name to confirm then click I understand... Click this link to go to the official repository: https://github.com/nightscout/cgm-remote-monitor Click on Fork Wait for completion then leave GitHub open. Log in Heroku https://id.heroku.com/login Select your app (hidden in yellow) Note: see this mLab message? Time to migrate to Atlas, it's mandatory! Click on Deploy Verify Heroku is connected to GitHub, if not, click Connect to GitHub If Heroku is not connected to GitHub, scroll down and click Connect to GitHub , if a popup window opens and requires authorization, click Authorize Heroku Type cgm-remote-monitor and click Search then click Connect If you have trouble connecting your app, click Disconnect and reconnect it as shown above Scroll down to the bottom of the page, select the master branch and click Deploy Branch Build will start and information will scroll in the log window. Do not leave the page, do not interfere and wait for completion. It might take more than 10 minutes. Interrupting the process will lead to a broken site and you'll need to restart deployment. Wait until the deploy process completes and click View Your site will open and should be at the latest version. You're done!","title":"Updating your site"},{"location":"update/update/#updating-your-site-to-the-latest-version","text":"Updating your website to the latest version (see here which is the current released version https://github.com/nightscout/cgm-remote-monitor/releases) is easy with the update tool linked below.","title":"Updating Your Site to the Latest Version"},{"location":"update/update/#requirements","text":"This version of Nightscout will probably not run on anything older than these versions/platforms: Android 4 iOS 9 Chrome 68 Edge 17 Firefox 61 Safari 10 (macOS 10.12) Opera 54 Internet Explorer: none","title":"Requirements"},{"location":"update/update/#azure-users","text":"As of 0.12, Nightscout no longer readily supports the free Azure platform. If you really want to keep using Azure, don\u2019t update to this version. Read this https://github.com/nightscout/cgm-remote-monitor/wiki/mLab-discontinuation-FAQ","title":"Azure Users"},{"location":"update/update/#step1-update-your-repository-in-github","text":"Click here to log in at GitHub: https://github.com/login . Enter your username or email and your password. Click Sign in Select your own cgm-remote-monitor project (not nightscout/cgm-remote-monitor ) Your repository will open, note your GitHub username (hidden below in yellow). Scroll down until you see the Nightscout logo. Click Update your site Enter your GitHub username and click Check for updates If an update is available click Continue updating at GitHub Make sure you see GitHub user located! else check your username. If you know an update is available but you see Repo is Up to date , try the alternative method. A pop-up will open, just click OK (you can read the contents if you want, but this is explained below, so just click OK) Now comes the tricky part. Make sure the left hand side repository is yours (name hidden in yellow) and the right hand side is nightscout/cgm-remote-monitor , and click Create pull request . A pull request opens. Last chance to check the left hand side repository is yours (name hidden in yellow) and right hand side is nightscout/cgm-remote-monitor , write a comment in the field (example Update or whatever you like) Scroll down and click Create pull request Scroll all the way down (it might be far away) and click Merge pull request Click Confirm merge A new line will appear in the pull requests log showing merge succeeded Your GitHub repository will show you're one commit ahead of the released version You have successfully updated your GitHub repository, now let's deploy it in Heroku.","title":"Step1: Update your repository in GitHub"},{"location":"update/update/#step2-deploy-in-heroku","text":"Log in Heroku https://id.heroku.com/login Select your app (hidden in yellow) Note: see this mLab message? Time to migrate to Atlas, it's mandatory! Click on Deploy Verify Heroku is connected to GitHub, if not, click Connect to GitHub If Heroku is not connected to GitHub, scroll down and click Connect to GitHub , if a popup window opens and requires authorization, click Authorize Heroku Verify your app cgm-remote-monitor is connected to GitHub If it isn't, In Connect to GitHub , type cgm-remote-monitor and click Search then click Connect If you have trouble connecting your app, click Disconnect and reconnect it as shown above Scroll down to the bottom of the page, select the master branch and click Deploy Branch Build will start and information will scroll in the log window. Do not leave the page, do not interfere and wait for completion. It might take more than 10 minutes. Interrupting the process will lead to a broken site and you'll need to restart deployment. Wait until the deploy process completes and click View Your site will open and should be at the latest version. You're done! Else, if you ran into trouble, try the alternative method below.","title":"Step2: Deploy in Heroku"},{"location":"update/update/#alternative-method","text":"Click here to log in at GitHub: https://github.com/login . Enter your username or email and your password. Click Sign in Select your own cgm-remote-monitor project (not nightscout/cgm-remote-monitor ) Click Settings Scroll down to Danger zone and click Delete this repository Copy and paste your full repository name to confirm then click I understand... Click this link to go to the official repository: https://github.com/nightscout/cgm-remote-monitor Click on Fork Wait for completion then leave GitHub open. Log in Heroku https://id.heroku.com/login Select your app (hidden in yellow) Note: see this mLab message? Time to migrate to Atlas, it's mandatory! Click on Deploy Verify Heroku is connected to GitHub, if not, click Connect to GitHub If Heroku is not connected to GitHub, scroll down and click Connect to GitHub , if a popup window opens and requires authorization, click Authorize Heroku Type cgm-remote-monitor and click Search then click Connect If you have trouble connecting your app, click Disconnect and reconnect it as shown above Scroll down to the bottom of the page, select the master branch and click Deploy Branch Build will start and information will scroll in the log window. Do not leave the page, do not interfere and wait for completion. It might take more than 10 minutes. Interrupting the process will lead to a broken site and you'll need to restart deployment. Wait until the deploy process completes and click View Your site will open and should be at the latest version. You're done!","title":"Alternative method"},{"location":"vendor/components-bootstrap/","text":"Bootstrap \u2301 Shim repository for Bootstrap . This package just provides the basic Bootstrap JavaScript in the package. This means that although the stylesheets are there, you will be required to provide your own means of including the styles. Package Managers \u2301 Bower : components-bootstrap Component : components/bootstrap Composer : components/bootstrap","title":"Index"},{"location":"vendor/components-bootstrap/#bootstrap","text":"Shim repository for Bootstrap . This package just provides the basic Bootstrap JavaScript in the package. This means that although the stylesheets are there, you will be required to provide your own means of including the styles.","title":"Bootstrap"},{"location":"vendor/components-bootstrap/#package-managers","text":"Bower : components-bootstrap Component : components/bootstrap Composer : components/bootstrap","title":"Package Managers"},{"location":"vendor/octokat/","text":"Octokat.js \u2301 Octokat.js provides a minimal higher-level wrapper around GitHub's API . It is being developed in the context of github-bookeditor , an EPUB3 Textbook editor for GitHub. This package can also be used in nodejs or as an AMD module in the browser. Key Features \u2301 Works in nodejs , an AMD module in the browser, and as a bower library Handles text and binary files Exposes everything available via the GitHub API (repos, teams, events, hooks, emojis, etc.) Supports ETag caching Paged results Node-style callbacks as well as optional Promises (to avoid those debates) 100% of the GitHub API Starring and Following repositories, users, and organizations Editing Team and Organization Membership User/Org/Repo events and notifications Listeners for rate limit changes Public Keys Hooks (commit, comment, etc.) Uses Angular, jQuery, or native promises if available Markdown generation Preview APIs (Deployments, Teams, etc) Enterprise APIs For the full list of supported methods see the Travis tests , the ./test directory, or ./src/grammar.coffee . Usage \u2301 All asynchronous methods accept a Node.js-style callback and return a Common-JS Promise . In a browser without RequireJS \u2301 Create an Octokat instance. var octo = new Octokat({ username: \"USER_NAME\", password: \"PASSWORD\" }); var cb = function (err, val) { console.log(val); }; octo.zen.read(cb); octo.repos('philschatz', 'octokat.js').fetch(cb); // Fetch repo info octo.me.starred('philschatz', 'octokat.js').add(cb); // Star a repo Or if you prefer OAuth: var octo = new Octokat({ token: \"OAUTH_TOKEN\" }); In a browser using RequireJS \u2301 define(['octokat'], function(Octokat) { var octo = new Octokat({ username: \"YOU_USER\", password: \"YOUR_PASSWORD\" }); }); In Node.js \u2301 Install instructions: npm install octokat --save var Octokat = require('octokat'); var octo = new Octokat({ username: \"YOU_USER\", password: \"YOUR_PASSWORD\" }); var cb = function (err, val) { console.log(val); }; octo.zen.read(cb); octo.repos('philschatz', 'octokat.js').fetch(cb); // Fetch repo info octo.me.starred('philschatz', 'octokat.js').add(cb); // Star a repo Using Generators in Node.js 0.11 (or EcmaScript 6 browsers) \u2301 This requires Node.js 0.11 with the --harmony-generators flag: var co = require('co'); var Octokat = require('octokat'); var octo = new Octokat(); var fn = function *() { var zen = yield octo.zen.read(); var info = yield octo.repos('philschatz', 'octokat.js').fetch(); console.log(zen); console.log(info); }; co(fn)(); Using bower \u2301 This file can be included using the bower package manager: bower install octokat --save Setup \u2301 This is all you need to get up and running: <script src=\"../dist/octokat.js\"></script> <script> var octo = new Octokat(); octo.zen.read(function(err, message) { if (err) { throw new Error(err); } alert(message); }); </script> Promises (Optional) \u2301 octokat.js has the following optional dependencies when used in a browser: A Promise API (supports jQuery, AngularJS, or a Promise polyfill) If you are already using jQuery or AngularJS in your project just be sure to include them before Octokat and it will use their Promise API. Otherwise, you can include a Promise polyfill like jakearchibald/es6-promise : <script src=\"./node_modules/es6-promise/dist/promise-0.1.2.js\"></script> <script src=\"./octokat.js\"> Preview new APIs \u2301 To use the APIs available for preview just add a acceptHeader when instantiating Octokat. For example: var octo = new Octokat({ token: 'API_TOKEN' acceptHeader: 'application/vnd.github.cannonball-preview+json' }); Enterprise APIs \u2301 To use the Enterprise APIs add the root URL when instantiating Octokat: var octo = new Octokat({ token: 'API_TOKEN' rootUrl: 'https://example.com/api/v3/' }); Testing \u2301 npm test will run the mocha tests for Node.js and the browser. Additionally, they can be run in the browser by starting a web server and going to ./test/index.html . About the Library \u2301 Overview \u2301 This library closely mirrors the https://developer.github.com/v3 documentation. For example, GET /repos/:owner/:repo becomes octo.repos(owner, repo).fetch() and POST /repos/:owner/:repo/issues/:number/comments becomes octo.repos(owner, repo).issues(number).comments.create(params) . Promises and Callbacks \u2301 This library supports Node.js-style callbacks as well as Promises. To use a callback, just specify it as the last argument to a method. To use a Promise, do not specify a callback and the return value will be a Promise. Example (get information on a repo): # Using callbacks octo.repos('philschatz', 'octokat.js').fetch (err, repo) -> console.error(err) if err # Do fancy stuff... # Using Promises octo.repos('philschatz', 'octokat.js').fetch() .then (repo) -> # Do fancy stuff .then null, (err) -> console.error(err) Chaining \u2301 You construct the URL by chaining properties and methods together and an async call is made once a verb method is called (see below). Example: octo = new Octokat() repo = octo.repos('philschatz', 'octokat.js') # Check if the current user is a collaborator on a repo repo.collaborators.contains(USER) .then (isCollaborator) -> # If not, then star the Repo unless isCollaborator repo.star.add() .then () -> # Done! Or, update a specific comment: octo = new Octokat(token: ...) octo.repos('philschatz', 'octokat.js').issues(1).comments(123123).update(body: 'Hello') .then () -> # Done! The basic structure of these methods is: .foos.fetch({optionalStuff:...}) yields a list of items (possibly paginated) .foos(id).fetch(...) yields a single item (issue, repo, user) .foos.contains(id) tests membership in a list (yields true/false) .foos.create(...) creates a new foo .foos(id).add() adds an existing User/Repo to the list .foos(id).remove() removes a member from a list or deletes the object and yields a boolean indicating success JSON with methods (Hypermedia) \u2301 GitHub provides URL patterns in its JSON responses. These are automatically converted into methods. For example: octo.repos('philschatz', 'octokat.js').fetch() .then (repo) -> # GitHub returns a JSON which contains something like compare_url: 'https://..../compare/{head}...{base} # This is converted to a method that accepts 2 arguments repo.compare(sha1, sha2).fetch() .then (comparison) -> # Done! Paged Results \u2301 If a .fetch() returns paged results then nextPage() , previousPage() , firstPage() and lastPage() are added to the returned JSON. For example: octo.repos('philschatz', 'octokat.js').commits.fetch() .then (someCommits) -> someCommits.nextPage() .then (moreCommits) -> # Done! Development \u2301 Run npm install Run grunt dist to generate the files in the ./dist directory The unit tests are named to illustrate examples of using the API. See Travis tests or run npm test to see them. linkedin/sepia is used to generate recorded results from GitHub and philschatz/sepia.js uses them in the browser. If you are adding tests be sure to include the updated fixtures in the Pull Request.","title":"Octokat.js [![Build Status](https://travis-ci.org/philschatz/octokat.js.png)](https://travis-ci.org/philschatz/octokat.js)"},{"location":"vendor/octokat/#octokatjs","text":"Octokat.js provides a minimal higher-level wrapper around GitHub's API . It is being developed in the context of github-bookeditor , an EPUB3 Textbook editor for GitHub. This package can also be used in nodejs or as an AMD module in the browser.","title":"Octokat.js"},{"location":"vendor/octokat/#key-features","text":"Works in nodejs , an AMD module in the browser, and as a bower library Handles text and binary files Exposes everything available via the GitHub API (repos, teams, events, hooks, emojis, etc.) Supports ETag caching Paged results Node-style callbacks as well as optional Promises (to avoid those debates) 100% of the GitHub API Starring and Following repositories, users, and organizations Editing Team and Organization Membership User/Org/Repo events and notifications Listeners for rate limit changes Public Keys Hooks (commit, comment, etc.) Uses Angular, jQuery, or native promises if available Markdown generation Preview APIs (Deployments, Teams, etc) Enterprise APIs For the full list of supported methods see the Travis tests , the ./test directory, or ./src/grammar.coffee .","title":"Key Features"},{"location":"vendor/octokat/#usage","text":"All asynchronous methods accept a Node.js-style callback and return a Common-JS Promise .","title":"Usage"},{"location":"vendor/octokat/#in-a-browser-without-requirejs","text":"Create an Octokat instance. var octo = new Octokat({ username: \"USER_NAME\", password: \"PASSWORD\" }); var cb = function (err, val) { console.log(val); }; octo.zen.read(cb); octo.repos('philschatz', 'octokat.js').fetch(cb); // Fetch repo info octo.me.starred('philschatz', 'octokat.js').add(cb); // Star a repo Or if you prefer OAuth: var octo = new Octokat({ token: \"OAUTH_TOKEN\" });","title":"In a browser without RequireJS"},{"location":"vendor/octokat/#in-a-browser-using-requirejs","text":"define(['octokat'], function(Octokat) { var octo = new Octokat({ username: \"YOU_USER\", password: \"YOUR_PASSWORD\" }); });","title":"In a browser using RequireJS"},{"location":"vendor/octokat/#in-nodejs","text":"Install instructions: npm install octokat --save var Octokat = require('octokat'); var octo = new Octokat({ username: \"YOU_USER\", password: \"YOUR_PASSWORD\" }); var cb = function (err, val) { console.log(val); }; octo.zen.read(cb); octo.repos('philschatz', 'octokat.js').fetch(cb); // Fetch repo info octo.me.starred('philschatz', 'octokat.js').add(cb); // Star a repo","title":"In Node.js"},{"location":"vendor/octokat/#using-generators-in-nodejs-011-or-ecmascript-6-browsers","text":"This requires Node.js 0.11 with the --harmony-generators flag: var co = require('co'); var Octokat = require('octokat'); var octo = new Octokat(); var fn = function *() { var zen = yield octo.zen.read(); var info = yield octo.repos('philschatz', 'octokat.js').fetch(); console.log(zen); console.log(info); }; co(fn)();","title":"Using Generators in Node.js 0.11 (or EcmaScript 6 browsers)"},{"location":"vendor/octokat/#using-bower","text":"This file can be included using the bower package manager: bower install octokat --save","title":"Using bower"},{"location":"vendor/octokat/#setup","text":"This is all you need to get up and running: <script src=\"../dist/octokat.js\"></script> <script> var octo = new Octokat(); octo.zen.read(function(err, message) { if (err) { throw new Error(err); } alert(message); }); </script>","title":"Setup"},{"location":"vendor/octokat/#promises-optional","text":"octokat.js has the following optional dependencies when used in a browser: A Promise API (supports jQuery, AngularJS, or a Promise polyfill) If you are already using jQuery or AngularJS in your project just be sure to include them before Octokat and it will use their Promise API. Otherwise, you can include a Promise polyfill like jakearchibald/es6-promise : <script src=\"./node_modules/es6-promise/dist/promise-0.1.2.js\"></script> <script src=\"./octokat.js\">","title":"Promises (Optional)"},{"location":"vendor/octokat/#preview-new-apis","text":"To use the APIs available for preview just add a acceptHeader when instantiating Octokat. For example: var octo = new Octokat({ token: 'API_TOKEN' acceptHeader: 'application/vnd.github.cannonball-preview+json' });","title":"Preview new APIs"},{"location":"vendor/octokat/#enterprise-apis","text":"To use the Enterprise APIs add the root URL when instantiating Octokat: var octo = new Octokat({ token: 'API_TOKEN' rootUrl: 'https://example.com/api/v3/' });","title":"Enterprise APIs"},{"location":"vendor/octokat/#testing","text":"npm test will run the mocha tests for Node.js and the browser. Additionally, they can be run in the browser by starting a web server and going to ./test/index.html .","title":"Testing"},{"location":"vendor/octokat/#about-the-library","text":"","title":"About the Library"},{"location":"vendor/octokat/#overview","text":"This library closely mirrors the https://developer.github.com/v3 documentation. For example, GET /repos/:owner/:repo becomes octo.repos(owner, repo).fetch() and POST /repos/:owner/:repo/issues/:number/comments becomes octo.repos(owner, repo).issues(number).comments.create(params) .","title":"Overview"},{"location":"vendor/octokat/#promises-and-callbacks","text":"This library supports Node.js-style callbacks as well as Promises. To use a callback, just specify it as the last argument to a method. To use a Promise, do not specify a callback and the return value will be a Promise. Example (get information on a repo): # Using callbacks octo.repos('philschatz', 'octokat.js').fetch (err, repo) -> console.error(err) if err # Do fancy stuff... # Using Promises octo.repos('philschatz', 'octokat.js').fetch() .then (repo) -> # Do fancy stuff .then null, (err) -> console.error(err)","title":"Promises and Callbacks"},{"location":"vendor/octokat/#chaining","text":"You construct the URL by chaining properties and methods together and an async call is made once a verb method is called (see below). Example: octo = new Octokat() repo = octo.repos('philschatz', 'octokat.js') # Check if the current user is a collaborator on a repo repo.collaborators.contains(USER) .then (isCollaborator) -> # If not, then star the Repo unless isCollaborator repo.star.add() .then () -> # Done! Or, update a specific comment: octo = new Octokat(token: ...) octo.repos('philschatz', 'octokat.js').issues(1).comments(123123).update(body: 'Hello') .then () -> # Done! The basic structure of these methods is: .foos.fetch({optionalStuff:...}) yields a list of items (possibly paginated) .foos(id).fetch(...) yields a single item (issue, repo, user) .foos.contains(id) tests membership in a list (yields true/false) .foos.create(...) creates a new foo .foos(id).add() adds an existing User/Repo to the list .foos(id).remove() removes a member from a list or deletes the object and yields a boolean indicating success","title":"Chaining"},{"location":"vendor/octokat/#json-with-methods-hypermedia","text":"GitHub provides URL patterns in its JSON responses. These are automatically converted into methods. For example: octo.repos('philschatz', 'octokat.js').fetch() .then (repo) -> # GitHub returns a JSON which contains something like compare_url: 'https://..../compare/{head}...{base} # This is converted to a method that accepts 2 arguments repo.compare(sha1, sha2).fetch() .then (comparison) -> # Done!","title":"JSON with methods (Hypermedia)"},{"location":"vendor/octokat/#paged-results","text":"If a .fetch() returns paged results then nextPage() , previousPage() , firstPage() and lastPage() are added to the returned JSON. For example: octo.repos('philschatz', 'octokat.js').commits.fetch() .then (someCommits) -> someCommits.nextPage() .then (moreCommits) -> # Done!","title":"Paged Results"},{"location":"vendor/octokat/#development","text":"Run npm install Run grunt dist to generate the files in the ./dist directory The unit tests are named to illustrate examples of using the API. See Travis tests or run npm test to see them. linkedin/sepia is used to generate recorded results from GitHub and philschatz/sepia.js uses them in the browser. If you are adding tests be sure to include the updated fixtures in the Pull Request.","title":"Development"}]}